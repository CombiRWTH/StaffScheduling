{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#welcome-to-staff-scheduling-documentations","title":"Welcome to Staff Scheduling Documentations","text":"<p>We are happy to have you here! You can find answers to all your questions within this documentation, which is loosely divided into two distinct views: the User View and the Developer View.</p> <p>If you are primarily interested in using and testing the Automatic Staff Scheduling system, you'll find all the important information in the User View without delving too deeply into technical details. On the other hand, if you wish to contribute to or further develop this project, be sure to check out the Developer View.</p> <p>Please note that as a user, you can always dive deeper into the technical details, and as a developer, you are welcome to revisit the general concepts whenever needed.</p>"},{"location":"#usage","title":"Usage","text":"<p>If you want to try out the automatic creation of the a staff schedule yourself, follow our \"Getting Started Guides\". There are two different versions of our program, with and without database access.</p> <ul> <li>Without database access: Getting Started Guide (Light)</li> <li>With database access: Getting Started Guide</li> </ul>"},{"location":"#getting-an-overview","title":"Getting an Overview","text":"<p>If you just want to get an overview over the codebase and the problem, you should start with those guides:</p> <ul> <li>Problem Defintion</li> <li>Codebase Overview</li> </ul>"},{"location":"collection-of-old-docs/ConstraintDataFormat/","title":"ConstraintDataFormat","text":""},{"location":"collection-of-old-docs/ConstraintDataFormat/#data-format-of-each-constraint","title":"Data format of each constraint","text":"<p>Most of the constraint need some kind of input. This input is save in <code>cases/i/</code> and stored as <code>json</code> file. The person who implements a new constraint does decide how the constraint is formulated / what the data format should look like, but is also responseable for its documentation.</p>"},{"location":"collection-of-old-docs/ConstraintDataFormat/#minimal-number-of-staff","title":"Minimal Number of Staff","text":"<p>For each type of staff there is a dictornary with each day of the week, providing the required number of staff per shift. The shift keys are <code>\"F\"</code>, <code>\"S\"</code> and <code>\"N\"</code>, for the german terms \"Fr\u00fchschicht\", \"Sp\u00e4tschicht\", \"Nachtschicht\". The weekdays are also in german and abbreviated. Example: <pre><code>{\n  \"Fachkraft\": {\n    \"Mo\": {\"F\": 1, \"S\": 1, \"N\": 1},\n    \"Di\": {\"F\": 1, \"S\": 4, \"N\": 3},\n    \"Mi\": {\"F\": 3, \"S\": 3, \"N\": 1},\n    \"Do\": {\"F\": 2, \"S\": 1, \"N\": 1},\n    \"Fr\": {\"F\": 1, \"S\": 2, \"N\": 1},\n    \"Sa\": {\"F\": 2, \"S\": 1, \"N\": 3} ,\n    \"So\": {\"F\": 1, \"S\": 2, \"N\": 1}\n  },\n  \"Hilfskraft\" : {\n    \"Mo\": {\"F\": 1, \"S\": 1, \"N\": 1},\n    \"Di\": {\"F\": 1, \"S\": 1, \"N\": 1},\n    \"Mi\": {\"F\": 1, \"S\": 1, \"N\": 1},\n    \"Do\": {\"F\": 1, \"S\": 1, \"N\": 1},\n    \"Fr\": {\"F\": 1, \"S\": 1, \"N\": 1},\n    \"Sa\": {\"F\": 1, \"S\": 1, \"N\": 1} ,\n    \"So\": {\"F\": 1, \"S\": 1, \"N\": 1}\n  },\n  \"Azubi\" : {\n    \"Mo\": {\"F\": 1, \"S\": 1, \"N\": 1},\n    \"Di\": {\"F\": 1, \"S\": 1, \"N\": 1},\n    \"Mi\": {\"F\": 1, \"S\": 1, \"N\": 1},\n    \"Do\": {\"F\": 1, \"S\": 1, \"N\": 1},\n    \"Fr\": {\"F\": 1, \"S\": 1, \"N\": 1},\n    \"Sa\": {\"F\": 1, \"S\": 1, \"N\": 1} ,\n    \"So\": {\"F\": 1, \"S\": 1, \"N\": 1}\n  }\n}\n</code></pre></p>"},{"location":"collection-of-old-docs/ConstraintDataFormat/#free-shifts-and-vacation-days","title":"Free Shifts and Vacation Days","text":"<p>All employees that have requested free shifts or vacation days a listed here with first and lastname. The example leaves our firstname because in the toy data they only have one string as name. The free days are given by a list of integers. Each interger corresponds to the day of the month, e.g. <code>[1,3]</code> means 1. and 3. free. The shift keys are <code>\"F\"</code>, <code>\"S\"</code> and <code>\"N\"</code>, for the german terms \"Fr\u00fchschicht\", \"Sp\u00e4tschicht\",\"Nachtschicht\". <pre><code>{\n    \"employees\": [\n      {\n        \"name\": \"Pauline\",\n        \"firstname\": \"\",\n        \"free_days\": [2,12],\n        \"free_shifts\": [\n            [3, \"F\"],\n            [4, \"N\"]\n        ]\n      },\n      {\n        \"name\": \"Marie\",\n        \"firstname\": \"\",\n        \"free_days\": [22, 23, 24],\n        \"free_shifts\": [\n            [1, \"F\"],\n            [2, \"S\"]\n        ]\n      },\n      {\n        \"name\": \"Dumbledore\",\n        \"firstname\": \"\",\n        \"free_days\": [],\n        \"free_shifts\": [\n            [19, \"N\"]\n        ]\n      }\n    ]\n  }\n</code></pre></p>"},{"location":"collection-of-old-docs/ConstraintDataFormat/#target-working-minutes","title":"Target Working Minutes","text":"<pre><code>{\n  \"employees\": [\n    {\n      \"firstname\": \"\",\n      \"name\": \"Pauline\",\n      \"target\": 9600\n    },\n    {\n      \"firstname\": \"\",\n      \"name\": \"Marie\",\n      \"target\": 9600\n    },\n    {\n      \"firstname\": \"\",\n      \"name\": \"Dumbledore\",\n      \"target\": 9600\n    }\n  ],\n  \"shift_durations\": {\n    \"F\": 480,\n    \"N\": 450,\n    \"S\": 480\n  },\n  \"tolerance_less\": 3000,\n  \"tolerance_more\": 480\n}\n</code></pre>"},{"location":"collection-of-old-docs/output_format/","title":"Output format","text":""},{"location":"collection-of-old-docs/output_format/#output-format","title":"Output Format","text":""},{"location":"collection-of-old-docs/output_format/#1-single-solution-representation","title":"1. Single Solution Representation","text":"<p>Each assignment in a solution is represented by a triple <code>(n, d, s)</code> where:</p> <ul> <li><code>n</code> (employee index): An integer indicating the employee.</li> <li><code>d</code> (day index): An integer indicating the day in the scheduling horizon.</li> <li><code>s</code> (shift index): An integer indicating the shift within the day (e.g., 0, 1, 2).</li> </ul> <p>A value of <code>1</code> indicates that the employee <code>n</code> works shift <code>s</code> on day <code>d</code>, while <code>0</code> means they do not.</p> <pre><code>{\n  \"(n, d, s)\": 0|1,\n  ...\n}\n</code></pre> <p>For example, for one employee on day 2 with shift 0:</p> <pre><code>\"(0, 2, 0)\": 1\n</code></pre>"},{"location":"collection-of-old-docs/output_format/#2-general-found_solution-folder-structure","title":"2. General <code>found_solution</code> Folder Structure","text":"<p>Each JSON file in the <code>found_solution</code> folder follows this structure:</p> <pre><code>{\n  \"caseID\": &lt;integer&gt;,\n  \"employees\": {\n    \"name_to_index\": {\n      \"&lt;EmployeeName&gt;\": &lt;index&gt;,\n      ...\n    }\n  },\n  \"constraints\": [\n    \"&lt;Constraint1&gt;\",\n    \"&lt;Constraint2&gt;\",\n    ...\n  ],\n  \"numOfSolutions\": &lt;integer&gt;,\n  \"givenSolutionLimit\": &lt;integer&gt;,\n  \"solutions\": [\n    {\n      \"(0, 0, 0)\": 0,\n      \"(0, 2, 2)\": 1,\n      \"(0, 5, 0)\": 1,\n      \"(0, 6, 1)\": 1,\n      ...\n    },\n    ...\n  ]\n}\n</code></pre>"},{"location":"collection-of-old-docs/concepts/","title":"Index","text":""},{"location":"collection-of-old-docs/concepts/#concepts","title":"Concepts","text":""},{"location":"collection-of-old-docs/concepts/#how-does-this-all-work","title":"How does this all work?","text":"<p>To help you understand how our codebase works, you need to understand what we did, how we formulated the problem and which tools we used to solve it. With problem we mean the automatic creation of a staff schedule which meets all given conditions.</p> <p>We answered those question and many more here:</p> <ul> <li>problem statement</li> <li>constraints</li> <li>objectives</li> <li>database</li> <li>visualization</li> </ul>"},{"location":"collection-of-old-docs/concepts/constraints/","title":"Constraints","text":"<p>All constraints are located inside <code>src/cp/constraints/*.py</code>. Each constraint is implemented as a function that takes a <code>CpModel</code><sup>1</sup> object and adds the necessary constraints to it. Constraints are considered as hard constraints as they must be satisfied for a valid schedule. For soft constraints, see the Objectives chapter.</p> <ul> <li>Free day after night shift phase</li> <li>Max one shift per day</li> <li>Minimum rest time between shifts</li> <li>Minimum number of staff per shift</li> <li>Rounds in early shift</li> <li>Target working time per month</li> <li>Vacation days and free shifts</li> </ul>"},{"location":"collection-of-old-docs/concepts/constraints/#all-constraints","title":"All Constraints","text":""},{"location":"collection-of-old-docs/concepts/constraints/#free-day-after-night-shift-phase","title":"Free day after night shift phase <sup>4</sup>","text":"<p>According to recommendations for the healthy organization of night and shift work, workers should have at least 24 hours of free time after a night shift. This ensures that workers have sufficient rest after a night shift. Therefore, if an employee works the night shift today and does not work the night shift tomorrow, they must take the day off.</p> src/cp/constraints/free_day_after_night_shift_phase.py<pre><code>model.add(day_tomorrow_variable == 0).only_enforce_if(\n    [night_shift_today_variable, night_shift_tomorrow_variable.Not()]\n)\n</code></pre>"},{"location":"collection-of-old-docs/concepts/constraints/#max-one-shift-per-day","title":"Max one shift per day","text":""},{"location":"collection-of-old-docs/concepts/constraints/#minimum-rest-time-between-shifts","title":"Minimum rest time between shifts <sup>3</sup>","text":""},{"location":"collection-of-old-docs/concepts/constraints/#minimum-number-of-staff-per-shift","title":"Minimum number of staff per shift <sup>2</sup>","text":"<p>Each shift has a minimum required number of staff. This is a hard constraint that must be met. The goal is to ensure that the required number of qualified staff members are present for each shift. Therefore, the total number of staff members assigned to a shift must be greater than or equal to the required number of staff for that shift.</p> src/cp/constraints/min_staffing.py<pre><code>model.add(sum(potential_working_staff) &gt;= min_staffing)\n</code></pre> <p></p> <p>Staff requirements per weekday and professional group.</p>"},{"location":"collection-of-old-docs/concepts/constraints/#rounds-in-early-shift","title":"Rounds in early shift <sup>2</sup>","text":"<p>In the early shift, at least one employee must conduct a round. Employees need to have a proper qualification to conduct a round. Therefore, at least one qualified employee needs to be assigned to an early shift on workdays.</p> src/cp/constraints/rounds_in_early_shift.py<pre><code>early_shift_variables = [\n    variables[\n        EmployeeDayShiftVariable.get_key(\n            employee, day, self._shifts[Shift.EARLY]\n        )\n    ]\n    for employee in qualified_employees\n]\n\nmodel.add_at_least_one(early_shift_variables)\n</code></pre>"},{"location":"collection-of-old-docs/concepts/constraints/#target-working-time-per-month","title":"Target working time per month <sup>1</sup>","text":"<p>Each employee has an individual monthly work target. This target is considered a hard constraint because it must be met within a certain range. A maximum deviation of one day shift is allowed (\u00b17.67 hours), but this is minimized by the objective function to ensure minimal overtime/undertime. Therefore, the total working time must fall within the range of all possible shift combinations and the target working time range.</p> src/cp/constraints/target_working_time.py<pre><code>working_time_variable = model.new_int_var_from_domain(\n    working_time_domain, f\"working_time_e:{employee.get_id()}\"\n)\n\nmodel.add(sum(possible_working_time) == working_time_variable)\nmodel.add(working_time_variable &lt;= target_working_time + TOLERANCE_MORE)\nmodel.add(working_time_variable &gt;= target_working_time - TOLERANCE_LESS)\n</code></pre>"},{"location":"collection-of-old-docs/concepts/constraints/#vacation-days-and-free-shifts","title":"Vacation days and free shifts <sup>1</sup>","text":"<p>Vacation days must remain free, and the day before a vacation day no night shift is allowed. Therefore, if an employee has a vacation day or a free shift, the corresponding shift variable must be set to zero. Also considering the night shift the day before a vacation day or free shift.</p> src/cp/constraints/vacation_days_and_free_shifts.py<pre><code>if employee.has_vacation(day.day):\n    model.add(day_variable == 0)\n\n    if day.day &gt; 1:\n        model.add(night_shift_variable == 0)\n\nif employee.has_vacation(day.day, shift.get_id()):\n    model.add(shift_variable == 0)\n</code></pre> <ol> <li> <p>OR Tools Documentation \u21a9\u21a9\u21a9</p> </li> <li> <p>Problem definition (PDF file from Moodle)\u00a0\u21a9\u21a9</p> </li> <li> <p>Occupational Health and Safety Law (Arbeitsschutzgesetz) (PDF file from Moodle)\u00a0\u21a9</p> </li> <li> <p>Guidelines for shift work\u00a0\u21a9</p> </li> </ol>"},{"location":"collection-of-old-docs/concepts/objectives/","title":"Objectives","text":"<p>All objectiveds are located inside <code>src/cp/objectives/*.py</code>. Each objective is implemented as a function that takes a <code>CpModel</code><sup>1</sup> object and adds the necessary constraints to it, while returning a returning a linear expression that represents the objective to be minimized. Objectives are considered as soft constraints as they should be satisfied in the best way possible for a valid schedule. For hard constraints, see the Constraints chapter.</p> <ul> <li>Free days near weekends</li> <li>Minimize consecutive night shifts</li> <li>Minimize overtime/undertime</li> <li>Not too many consecutive shifts</li> <li>Forward rotation of shifts</li> </ul>"},{"location":"collection-of-old-docs/concepts/objectives/#all-objectives","title":"All Objectives","text":""},{"location":"collection-of-old-docs/concepts/objectives/#free-days-near-weekends","title":"Free days near weekends <sup>4</sup>","text":"<p>Employees should have free days near weekends to ensure a better work-life balance. This is a soft constraint that should be satisfied as much as possible. Therefore, if an employee has a free day on a Friday to Monday, it is rewarded with a positive score in the objective function. A bonus is given when two or more consecutive free days are scheduled near the weekend.</p> src/cp/objectives/free_days_near_weekends.py<pre><code>if day.isoweekday() in [5, 6, 7]:\n    model.add(day_today_variable == 0).only_enforce_if(\n        free_today_day_variable\n    )\n    model.add(day_today_variable == 1).only_enforce_if(\n        free_today_day_variable.Not()\n    )\n    if day + timedelta(1) in self._days:\n        model.add(day_tomorrow_variable == 0).only_enforce_if(\n            free_tomorrow_day_variable\n        )\n        model.add(day_tomorrow_variable != 0).only_enforce_if(\n            free_tomorrow_day_variable.Not()\n        )\n\n        model.add_bool_and(\n            [free_today_day_variable, free_tomorrow_day_variable]\n        ).only_enforce_if(free_both_days_variable)\n        model.add_bool_or(\n            [\n                free_today_day_variable.Not(),\n                free_tomorrow_day_variable.Not(),\n            ]\n        ).only_enforce_if(free_both_days_variable.Not())\n</code></pre>"},{"location":"collection-of-old-docs/concepts/objectives/#minimize-consecutive-night-shifts","title":"Minimize consecutive night shifts","text":""},{"location":"collection-of-old-docs/concepts/objectives/#minimize-overtimeundertime","title":"Minimize overtime/undertime <sup>1</sup>","text":"<p>Overtime and undertime are possible and acceptable, but they should be minimized as much as possible. Therefore, the each minute of overtime or undertime is punished with a negative score in the objective function.</p> src/cp/objectives/minimize_overtime.py<pre><code>model.add_abs_equality(\n    possible_overtime_variable,\n    sum(possible_working_time) - target_working_time,\n)\n</code></pre>"},{"location":"collection-of-old-docs/concepts/objectives/#not-too-many-consecutive-shifts","title":"Not too many consecutive shifts","text":""},{"location":"collection-of-old-docs/concepts/objectives/#forward-rotation-of-shifts","title":"Forward rotation of shifts <sup>4</sup>","text":"<p>Shifts should be rotated in a forward direction, meaning that the order of shifts should be from early to late, and not the other way around. This is a soft constraint that should be satisfied as much as possible. Therefore, rotating the shifts forward is rewarded with a positive score in the objective function.</p> src/cp/objectives/rotate_shifts_forward.py<pre><code>model.add_bool_and(\n    [current_shift_variable, next_desired_shift_variable]\n).only_enforce_if(rotation_variable)\nmodel.add_bool_or(\n    [\n        current_shift_variable.Not(),\n        next_desired_shift_variable.Not(),\n    ]\n).only_enforce_if(rotation_variable.Not())\n</code></pre> <ol> <li> <p>OR Tools Documentation \u21a9\u21a9</p> </li> <li> <p>Problem definition (PDF file from Moodle)\u00a0\u21a9</p> </li> <li> <p>Occupational Health and Safety Law (Arbeitsschutzgesetz) (PDF file from Moodle)\u00a0\u21a9</p> </li> <li> <p>Guidelines for shift work\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"collection-of-old-docs/concepts/visualization/","title":"Visualization","text":""},{"location":"collection-of-old-docs/concepts/visualization/#visualization-of-shift-scheduling-webapp","title":"Visualization of Shift Scheduling (WebApp)","text":""},{"location":"collection-of-old-docs/concepts/visualization/#overview","title":"Overview","text":"<p>This web application visualizes generated shift plans stored as JSON files in the <code>found_solutions</code> directory. It uses Flask as the web server and Bootstrap for a clean and responsive interface.</p>"},{"location":"collection-of-old-docs/concepts/visualization/#starting-the-web-server","title":"Starting the Web Server","text":"<p>The WebApp can be started using:</p> <pre><code>uv run .\\algorithm\\WebApp.py\n</code></pre> <p>By default, the server runs at http://localhost:5000.</p>"},{"location":"collection-of-old-docs/concepts/visualization/#file-selection","title":"File Selection","text":"<p>On startup, the application automatically scans the <code>found_solutions</code> directory for files with the pattern:</p> <pre><code>solutions_YYYY-MM-DD_HH-MM-SS.json\n</code></pre> <p>The most recent file is loaded by default.</p>"},{"location":"collection-of-old-docs/concepts/visualization/#file-dropdown","title":"File Dropdown","text":"<p>A dropdown menu at the top of the interface allows you to select a specific solution file. Upon selection, the page reloads with the chosen file.</p>"},{"location":"collection-of-old-docs/concepts/visualization/#selecting-a-solution-within-a-file","title":"Selecting a Solution Within a File","text":"<p>Each file can contain multiple solutions. These can be selected using another dropdown next to the file selection.</p>"},{"location":"collection-of-old-docs/concepts/visualization/#data-display","title":"Data Display","text":"<ul> <li>The table shows all employees and their assigned shifts per day.</li> <li> <p>Shifts are color-coded:</p> </li> <li> <p>Early shift (<code>F</code>): red</p> </li> <li>Late shift (<code>S</code>): blue</li> <li>Night shift (<code>N</code>): green</li> <li>Hovering over an employee's name displays the total number of assigned shifts.</li> </ul>"},{"location":"collection-of-old-docs/concepts/visualization/#exporting-data","title":"Exporting Data","text":"<p>Download links are provided for the currently selected solution:</p> <ul> <li>Export as CSV</li> <li>Export as Excel file</li> </ul>"},{"location":"collection-of-old-docs/getting-started/","title":"Index","text":"<p>To help you get started with StaffScheduling, we have prepared a guide that will walk you through the installation and usage of the project.</p> <ul> <li>Prerequisites Prerequisites</li> <li>Installation Installation</li> <li>First Steps First Steps</li> </ul>"},{"location":"collection-of-old-docs/getting-started/first-steps/","title":"First steps","text":""},{"location":"collection-of-old-docs/getting-started/first-steps/#-first-steps","title":"\ud83d\udc63 First Steps","text":"<p>After installing dependencies and setting up pre-commit, you can start solving staff scheduling problems using either of the following methods.</p>"},{"location":"collection-of-old-docs/getting-started/first-steps/#1-usage","title":"1. Usage","text":"<p>Currently, we have two ways to start our project</p> <ol> <li>\u25b6\ufe0f Method 1: Direct Solver Script</li> </ol> <p>Run the solver directly via the main script:</p> <pre><code>uv run algorithm/solving.py [--case_id CASE_ID] [--month MONTH] [--year YEAR] [--output OUTPUT ...]\n</code></pre>"},{"location":"collection-of-old-docs/getting-started/first-steps/#arguments","title":"Arguments","text":"<ul> <li> <p><code>--case_id</code>, <code>-c</code> (int, default: 1)   ID of the case folder to load scheduling data from.</p> </li> <li> <p><code>--month</code>, <code>-m</code> (int, default: 11)   Month of the staff schedule plan.</p> </li> <li> <p><code>--year</code>, <code>-y</code> (int, default: 2025)   Year of the staff schedule plan.</p> </li> <li> <p><code>--output</code>, <code>-o</code> (one or more values, default: [\"json\"])   Output formats. Supported options:</p> </li> <li> <p><code>json</code> \u2013 Save the schedule as a JSON file</p> </li> <li><code>plot</code> \u2013 Show a visual plot of the schedule</li> <li><code>print</code> \u2013 Print the schedule to the console</li> </ul>"},{"location":"collection-of-old-docs/getting-started/first-steps/#example","title":"Example","text":"<pre><code>uv run algorithm/solving.py -c 1 -m 11 -y 2025 -o json plot\n</code></pre> <p>This will plan for November in 2025 using case folder 1 and produce both JSON and plot outputs.</p> <ol> <li>\u2699\ufe0f Method 2: Using the solve Command If your project includes an entry point named solve (e.g. via pyproject.toml), you can use the following command after syncing dependencies:</li> </ol> <pre><code>uv sync\nuv run solve\n</code></pre> <p>Both methods will execute the same underlying logic to solve the scheduling problem.</p>"},{"location":"collection-of-old-docs/getting-started/installation/","title":"Installation","text":""},{"location":"collection-of-old-docs/getting-started/installation/#-installation","title":"\ud83d\ude80 Installation","text":"<p>Follow these steps to set up the development environment.</p>"},{"location":"collection-of-old-docs/getting-started/installation/#1--install-dependencies","title":"1. \ud83d\udce6 Install dependencies","text":"<p>Make sure <code>uv</code> is installed.</p> <pre><code>uv sync\n</code></pre> <p>This will install all required dependencies.</p>"},{"location":"collection-of-old-docs/getting-started/installation/#2--set-up-pre-commit-hooks","title":"2. \ud83d\udd27 Set Up Pre-commit Hooks","text":"<p>Install Git hooks using pre-commit:</p> <pre><code>uv run pre-commit install\n</code></pre> <p>This enables automatic code checks (e.g., formatting, linting, whitespace trimming) on every commit.</p>"},{"location":"collection-of-old-docs/getting-started/installation/#3--verify-setup","title":"3. \u2705 Verify Setup","text":"<p>To manually run all pre-commit hooks across the entire project:</p> <pre><code>uv run pre-commit run --all-files\n</code></pre> <p>Use this to validate that your environment is configured correctly and that all files meet the code quality standards.</p>"},{"location":"collection-of-old-docs/getting-started/installation/#4--optional-run-hooks-only-on-docs","title":"4. \ud83e\uddea Optional: Run Hooks Only on docs/","text":"<p>To check only the docs/ folder:</p> <pre><code>uv run pre-commit run --files $(find docs -type f)\n</code></pre> <p>Useful when working exclusively on documentation.</p>"},{"location":"collection-of-old-docs/getting-started/installation/#5-next-steps","title":"5. Next steps","text":"<p>Proceed to the first-steps section to start with your project.</p>"},{"location":"collection-of-old-docs/getting-started/prerequisites/","title":"Prerequisites","text":""},{"location":"collection-of-old-docs/getting-started/prerequisites/#-prerequisites","title":"\ud83d\udee0 Prerequisites","text":"<p>Before setting up the project, make sure the following tools are installed on your system:</p>"},{"location":"collection-of-old-docs/getting-started/prerequisites/#1--install-python-310","title":"1. \ud83d\udc0d Install Python 3.10+","text":"<p>This project requires Python 3.10 or higher.</p> <p>You can check your version by running:</p> <pre><code>python3 --version\n</code></pre> <p>If not installed, download it from the official website: https://www.python.org/downloads/</p>"},{"location":"collection-of-old-docs/getting-started/prerequisites/#2--install-uv","title":"2. \ud83d\ude80 Install <code>uv</code>","text":"<p>uv is a fast Python package manager used to create and manage isolated environments.</p> <p>You can install it following the instructions in the official documentation:</p> <p>https://docs.astral.sh/uv/getting-started/installation/</p>"},{"location":"collection-of-old-docs/getting-started/prerequisites/#3--install-unixodbc-mac-only","title":"3. \ud83c\udf4f Install <code>unixodbc</code> (Mac only)","text":"<p>You can install it following the instructions in the official documentation:</p> <p>https://pypi.org/project/pyodbc/</p>"},{"location":"collection-of-old-docs/getting-started/prerequisites/#4-next-steps","title":"4. Next steps","text":"<p>Proceed to the Installation section to set up the project dependencies.</p>"},{"location":"developer-view/","title":"Developer View","text":""},{"location":"developer-view/#documentation---user-view","title":"Documentation - User View","text":"<p>The developer view is a extension of the user view. It provides all necessary information to use our application, to understand how we used Google's OR Tools to solve the problem of automatic staff scheduling, to dive deep into the structure of the TimeOffice database and to get an overview of our codebase before you start contributing.</p> <p>Get right into it:</p> <ul> <li>Run it yourself: Getting Started (Dev)</li> <li>Understand the problem: Problem Defintion</li> <li>Deep Dive into TimeOffice database:<ul> <li>connecting</li> <li>querying</li> <li>tables</li> </ul> </li> <li>Start Contributing: Codebase Overview</li> </ul>"},{"location":"developer-view/codebase-overview/","title":"Codebase Overview","text":""},{"location":"developer-view/codebase-overview/#project-structure","title":"Project Structure","text":""},{"location":"developer-view/codebase-overview/#source-code-src","title":"Source Code (<code>src/</code>)","text":"<p>The main source code is organized in the <code>src/</code> directory:</p>"},{"location":"developer-view/codebase-overview/#core-data-models","title":"Core Data Models","text":"<pre><code>src/\n\u251c\u2500\u2500 main.py                  # Main entry point\n\u251c\u2500\u2500 solve.py                 # Most important class to combine everything for the solver. Command-line solver interface.\n\u251c\u2500\u2500 plot.py                  # Visualization utilities\n\u2514\u2500\u2500 run.bat                  # Batch script that can be connected to TimeOffice itself to start automated process\n</code></pre> <p>Additianal there are the following helper classes: <pre><code>src/\n\u251c\u2500\u2500 employee.py\n\u251c\u2500\u2500 day.py\n\u251c\u2500\u2500 shift.py\n\u2514\u2500\u2500 solution.py\n</code></pre></p>"},{"location":"developer-view/codebase-overview/#constraint-programming-engine-srccp","title":"Constraint Programming Engine (<code>src/cp/</code>)","text":"<p>The core of the optimization system, is build in the cp directory:</p> <pre><code>src/cp/\n\u251c\u2500\u2500 __init__.py                # CP module exports\n\u251c\u2500\u2500 model.py                   # Main optimization model\n\u251c\u2500\u2500 variables/                 # Decision variables\n\u2502   \u251c\u2500\u2500 variable.py           # Base variable class\n\u2502   \u251c\u2500\u2500 employee_day.py       # Employee-day assignments\n\u2502   \u2514\u2500\u2500 employee_day_shift.py # Employee-day-shift assignments\n\u251c\u2500\u2500 constraints/               # Business rules and restrictions\n\u2502   \u251c\u2500\u2500 constraint.py         # Base constraint class\n\u2502   \u251c\u2500\u2500 max_one_shift_per_day.py\n\u2502   \u251c\u2500\u2500 min_staffing.py\n\u2502   \u251c\u2500\u2500 target_working_time.py\n\u2502   \u2514\u2500\u2500 ...                   # Various constraint implementations\n\u2514\u2500\u2500 objectives/                # Optimization goals\n    \u251c\u2500\u2500 objective.py          # Base objective class\n    \u251c\u2500\u2500 minimize_overtime.py\n    \u251c\u2500\u2500 maximize_wishes.py\n    \u2514\u2500\u2500 ...                   # Various objective implementations\n</code></pre> <p>Key Components:</p> <ul> <li>Variables: Define variables used for objectives and constraints</li> <li>Constraints: Define what rules must be followed</li> <li>Objectives: Define what outcomes to optimize for</li> <li>Model: Orchestrates the entire optimization process</li> </ul>"},{"location":"developer-view/codebase-overview/#data-loading-srcloader","title":"Data Loading (<code>src/loader/</code>)","text":"<p>Handles different data input formats:</p> <pre><code>src/loader/\n\u251c\u2500\u2500 loader.py                 # Is used an an interface to access the methods in filesystem_loader.py\n\u2514\u2500\u2500 filesystem_loader.py      # JSON/file-based data loading usd for loading the files from the drive\n</code></pre>"},{"location":"developer-view/codebase-overview/#database-integration-srcdb","title":"Database Integration (<code>src/db/</code>)","text":"<p>Database connectivity and data persistence:</p> <pre><code>src/db/\n\u251c\u2500\u2500 connection_setup.py      # Database connection configuration\n\u251c\u2500\u2500 export_data.py           # Export data to database\n\u251c\u2500\u2500 export_main.py           # Main export functionality\n\u251c\u2500\u2500 import_main.py           # Main import functionality\n\u2514\u2500\u2500 import_solution.py       # Import scheduling solutions\n</code></pre>"},{"location":"developer-view/codebase-overview/#web-interface-srcweb","title":"Web Interface (<code>src/web/</code>)","text":"<p>Web-based user interface:</p> <pre><code>src/web/\n\u251c\u2500\u2500 app.py                   # Flask web application\n\u251c\u2500\u2500 analyze_solution.py\n\u2514\u2500\u2500 templates/\n    \u2514\u2500\u2500 index.html           # Main web interface template\n</code></pre>"},{"location":"developer-view/codebase-overview/#test-cases-cases","title":"Test Cases (<code>cases/</code>)","text":"<p>Sample data and test scenarios:</p> <pre><code>cases/\n\u251c\u2500\u2500 1/\n\u2502   \u251c\u2500\u2500 employees.json\n\u2502   \u251c\u2500\u2500 general_settings.json\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 2/\n\u251c\u2500\u2500 3/\n\u2514\u2500\u2500 case_catalog.md         # Documentation of test cases\n</code></pre>"},{"location":"developer-view/codebase-overview/#documentation-docs","title":"Documentation (<code>docs/</code>)","text":"<p>The files for this documentation. ;)</p>"},{"location":"developer-view/getting-started-dev/","title":"Getting-Started (Dev)","text":""},{"location":"developer-view/getting-started-dev/#prerequisites","title":"Prerequisites","text":"<p>Before setting up the project, make sure the following tools are installed on your system:</p>"},{"location":"developer-view/getting-started-dev/#1-install-python-310","title":"1. Install Python 3.10+","text":"<p>This project requires Python 3.10 or higher.</p> <p>Open your terminal (Mac) or Command Prompt (Windows). Check whether and which version of python you have installed by running:</p> <pre><code>python3 --version\n</code></pre> <p>If not installed, download it from the official website: https://www.python.org/downloads/ and install it.</p>"},{"location":"developer-view/getting-started-dev/#2-install-uv","title":"2. Install <code>uv</code>","text":"<p>uv is a fast Python package manager used to create and manage isolated environments. You can install it following the instructions in the official documentation:</p> <p>https://docs.astral.sh/uv/getting-started/installation/</p>"},{"location":"developer-view/getting-started-dev/#3-install-odbc-driver","title":"3. Install <code>ODBC Driver</code>","text":"<p>You can install it following the instructions in the official documentation:</p>"},{"location":"developer-view/getting-started-dev/#install-microsoft-odbc-driver-18-for-sql-server-windows-only","title":"Install <code>Microsoft ODBC Driver 18 for SQL Server</code> (Windows only)","text":"<p>https://learn.microsoft.com/en-us/sql/connect/odbc/</p>"},{"location":"developer-view/getting-started-dev/#install-unixodbc-mac-only","title":"Install <code>unixodbc</code> (Mac only)","text":"<p>https://pypi.org/project/pyodbc/</p>"},{"location":"developer-view/getting-started-dev/#installation","title":"Installation","text":"<p>Follow these steps to set up the development environment.</p>"},{"location":"developer-view/getting-started-dev/#1-download-our-project","title":"1. Download our Project","text":"<p>In order to use our application you need to download the code from Github. If you are familiar with Github, you can simply clone the project, if not, you can click on the green \"Code\" button and choose to download as zip file, which you need to unpack. Then open a command line tool (terminal or command prompt) to navigate to the project folder.</p>"},{"location":"developer-view/getting-started-dev/#2-install-dependencies","title":"2. Install dependencies","text":"<p>Make sure <code>uv</code> is installed.</p> <pre><code>uv sync\n</code></pre> <p>This will install all required dependencies.</p>"},{"location":"developer-view/getting-started-dev/#2-set-up-pre-commit-hooks-only-if-you-want-to-change-something","title":"2. Set Up Pre-commit Hooks (Only if you want to change something)","text":"<p>We use a Git hook called pre-commit which automatically checks and corrects format mistakes in our files. So you need to install Git hooks using pre-commit:</p> <pre><code>uv run pre-commit install\n</code></pre> <p>This enables automatic code checks (e.g., formatting, linting, whitespace trimming) on every commit.</p>"},{"location":"developer-view/getting-started-dev/#3-verify-setup","title":"3. Verify Setup","text":"<p>To manually run all pre-commit hooks across the entire project:</p> <pre><code>uv run pre-commit run --all-files\n</code></pre>"},{"location":"developer-view/getting-started-dev/#usage","title":"Usage","text":""},{"location":"developer-view/getting-started-dev/#0-fetching","title":"0. Fetching","text":"<p>First you would need to fetch the data from the database. For that you need to create a <code>.env</code> file in the root directory, use our template. There you need to define the database credentials, which you should be told by your instructors.</p> <p>Then you can use the <code>fetch</code> command. <pre><code>uv run staff-scheduling fetch 77 2024-11-01 2024-11-30\n</code></pre> This reads the data from the database from Planungseinheit 77 in November 2024 and creates a folder in <code>cases/</code>.</p>"},{"location":"developer-view/getting-started-dev/#1-solving","title":"1. Solving","text":"<p>After installing dependencies, you can start solving staff scheduling problems by running <pre><code>uv run staff-scheduling solve 3 01.11.2024 30.11.2024\n</code></pre> The three corresponds to the <code>case_id</code> meaning in the folder <code>cases/3</code>. If you want to create your own case simply copy the folder 3 and rename it to another integer. Then you can change the number of employees etc., see configuration.</p> <p>The algorithm needs 5 minutes to find a solution.</p>"},{"location":"developer-view/getting-started-dev/#2-viewing","title":"2. Viewing","text":"<p>After the algorithm found a solution you can view it by running <pre><code>uv run staff-scheduling plot 3\n</code></pre> If you have created your own case, you need to change the integer <code>3</code> to your new case. You can then view the solution by opening the link you see in the terminal, probably http://127.0.0.1:5020.</p> <p>Next to the assigned shift, our visualization offers some more insights.</p> <ul> <li>colored small dot: employee is forbidden to work that specific shift (hard)</li> <li>red background: employee is forbidden to work that day (hard), e.g. vacation day</li> <li>colored small diamond: employee wishes to have shift corresponding to the color off</li> <li>brown triangle: employee wished to have the whole day off</li> <li>green background: wish for specific shift off was granted</li> <li>yellow background: wish for complete day off was granted</li> </ul>"},{"location":"developer-view/json-dataformat/","title":"JSON Dataformats","text":""},{"location":"developer-view/json-dataformat/#file-employees_typesjson","title":"File: <code>employees_types.json</code>","text":""},{"location":"developer-view/json-dataformat/#description","title":"Description","text":"<p>This file contains three lists of interal job titles that are mapped to the job categories / level that we use: \"Azubi\", \"Fachkraft\" and \"Hilfskraft\".</p>"},{"location":"developer-view/json-dataformat/#structure","title":"Structure","text":"<pre><code>{\n  \"Azubi\": \"list\",          // List of all internal job titles that are seen as \"Azubi\"\n  \"Fachkraft\": \"list\",      // List of all internal job titles that are seen as \"Fachkraft\"\n  \"Hilfskraft\": \"list\"      // List of all internal job titles that are seen as \"Hilfskraft\"\n}\n</code></pre>"},{"location":"developer-view/json-dataformat/#file-employeesjson","title":"File: <code>employees.json</code>","text":""},{"location":"developer-view/json-dataformat/#description_1","title":"Description","text":"<p>This file contains a list of all employees within our planning unit (Planungseinheit), including their <code>key</code> (internal ID), <code>personnel_number</code>, <code>name</code>, <code>firstname</code>, and <code>title</code> (job title).</p>"},{"location":"developer-view/json-dataformat/#structure_1","title":"Structure","text":"<pre><code>{\n  \"employees\": [             // List of all employees\n    {\n      \"key\": \"int\",          // Internal primary key ID\n      \"firstname\": \"string\", // First name of the employee\n      \"name\": \"string\",      // Last name of the employee\n      \"type\": \"string\"       // Job title (may include an intern classification code)\n    }\n  ]\n}\n</code></pre>"},{"location":"developer-view/json-dataformat/#file-free_shifts_and_vacation_daysjson","title":"File: <code>free_shifts_and_vacation_days.json</code>","text":""},{"location":"developer-view/json-dataformat/#description_2","title":"Description","text":"<p>This file contains the list of all employees within our PE (Planungseinheit) which already have submitted vacation days or shifts within TimeOffice or days that are either crossed off or worked within another PE. If an employee is not working somewehere else or has blocked days then an empty entry exists.</p>"},{"location":"developer-view/json-dataformat/#structure_2","title":"Structure","text":"<pre><code>{\n  \"employees\": [             // List of all employees\n    {\n      \"key\": \"int\",          // Internal primary key ID\n      \"firstname\": \"string\", // First name of the employee\n      \"name\": \"string\",      // Last name of the employee\n      \"forbidden_days\": [    // Days that are crossed off within TimeOffice = not available\n        [\"int\"]\n      ],\n      \"reserved\": [          // Shifts that are crossed off within TimeOffice and worked in\n        [\"int\", \"string\"]    // another PE = not available\n      ],\n      \"vacation_days\": [     // Days that are marked as vacation days = not available\n        [\"int\"]\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"developer-view/json-dataformat/#file-general_settingsjson","title":"File: <code>general_settings.json</code>","text":""},{"location":"developer-view/json-dataformat/#description_3","title":"Description","text":"<p>This file contains qualifications of specific employees identified by their key. The only qualification currently in use is \"rounds\".</p>"},{"location":"developer-view/json-dataformat/#structure_3","title":"Structure","text":"<pre><code>{\n  \"qualifications\": {\n    \"employee_key_A\": \"list\"[\"str\"],\n    \"employee_key_B\": \"list\"[\"str\"],\n    ...\n  }\n}\n</code></pre>"},{"location":"developer-view/json-dataformat/#file-minimal_number_of_staffjson","title":"File: <code>minimal_number_of_staff.json</code>","text":""},{"location":"developer-view/json-dataformat/#description_4","title":"Description","text":"<p>This file contains three tables in JSON Format: \"Azubi\", \u201dHilfskraft\", \"Fachkr\u00e4fte\". Those tables set the required number of employees of a specific type on every weekday for each shifts.</p>"},{"location":"developer-view/json-dataformat/#structure_4","title":"Structure","text":"<pre><code>{\n  \"Azubi\": {\n    \"Mo\": {\n      \"F\": \"int\",\n      \"N\": \"int\",\n      \"S\": \"int\"\n    },\n    ...\n  },\n  \"Hilfkraft\": {\n    \"Mo\": {\n      \"F\": \"int\",\n      \"N\": \"int\",\n      \"S\": \"int\"\n    },\n    ...\n  },\n  \"Fachkraft\": {\n    \"Mo\": {\n      \"F\": \"int\",\n      \"N\": \"int\",\n      \"S\": \"int\"\n    },\n    ...\n  }\n}\n</code></pre>"},{"location":"developer-view/json-dataformat/#file-shift_informationjson","title":"File: <code>shift_information.json</code>","text":""},{"location":"developer-view/json-dataformat/#description_5","title":"Description","text":"<p>This file contains all information known about each type of shift.</p>"},{"location":"developer-view/json-dataformat/#structure_5","title":"Structure","text":"<pre><code>  {\n    \"break_duration\": \"float\",              // Break duration in Minutes\n    \"end_time\": \"string YYYY-MM-DDTHH:MM:SS\",   // end of shift, timestamp\n    \"shift_duration\": \"float\",              // difference between end and start in minutes\n    \"shift_id\": \"string\",\n    \"shift_name\": \"string\",\n    \"start_time\": \"string YYYY-MM-DDTHH:MM:SS\",   // start of shift, timestamp\n    \"working_minutes\": \"float\"              // shift duration minus break duration\n  },\n</code></pre>"},{"location":"developer-view/json-dataformat/#file-target_working_minutesjson","title":"File: <code>target_working_minutes.json</code>","text":""},{"location":"developer-view/json-dataformat/#description_6","title":"Description","text":"<p>This file contains the list of all employees within our PE (Planungseinheit) referring to their monthly target working minutes and the already existing working minutes within TimeOffice.</p>"},{"location":"developer-view/json-dataformat/#structure_6","title":"Structure","text":"<pre><code>{\n  \"employees\": [             // List of all employees\n    {\n      \"key\": \"int\",          // Internal primary key ID\n      \"firstname\": \"string\", // First name of the employee\n      \"name\": \"string\",      // Last name of the employee\n      \"actual\": \"float\",     // Already worked/registered working minutes within TimeOffice\n      \"target\": \"float\"      // Target working minutes for the current month\n    }\n  ]\n}\n</code></pre>"},{"location":"developer-view/json-dataformat/#file-wishes_and_blockedjson","title":"File: <code>wishes_and_blocked.json</code>","text":""},{"location":"developer-view/json-dataformat/#description_7","title":"Description","text":"<p>This file contains the list of employees within our PE (Planungseinheit) which have submitted wishes of their preferences for off-shifts and off-days as well as unavailability due to special circumstances such as health or family-related restrictions. This file need to be created by hand as the wishes currently cannot be inserted via TimeOffice.</p>"},{"location":"developer-view/json-dataformat/#structure_7","title":"Structure","text":"<pre><code>{\n  \"employees\": [               // List of all employees\n    {\n      \"key\": \"int\",            // Internal primary key ID\n      \"firstname\": \"string\",   // First name of the employee\n      \"name\": \"string\",        // Last name of the employee\n      \"blocked_days\": [\"int\"], // Unavailable days due to health reasons, family-related restrictions or personal unavailability\n      \"blocked_shifts\": [      // Unavailable shifts due to health reasons, family-related\n        [\"int\", \"string\"]      // restrictions or personal unavailability\n      ],\n      \"wish_days\": [\"int\"],    // Days that employee wishes to get off or avoid\n      \"wish_shifts\": [         // Shifts that employee wishes to get off or avoid\n        [\"int\", \"string\"]\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"developer-view/json-dataformat/#file-worked_sundaysjson","title":"File: <code>worked_sundays.json</code>","text":""},{"location":"developer-view/json-dataformat/#description_8","title":"Description","text":"<p>This file contains the list of all employees within our PE (Planungseinheit) and how many sundays they have already worked in the last 12 months.</p>"},{"location":"developer-view/json-dataformat/#structure_8","title":"Structure","text":"<pre><code>{\n  \"employees\": [               // List of all employees\n    {\n      \"key\": \"int\",            // Internal primary key ID\n      \"firstname\": \"string\",   // First name of the employee\n      \"name\": \"string\",        // Last name of the employee\n      \"worked_sundays\": \"int\"  // Count of already worked sundays in last 12 months\n    }\n  ]\n}\n</code></pre>"},{"location":"developer-view/ortools/","title":"Google's OR Tools and SAT-Solver","text":""},{"location":"developer-view/ortools/#introduction","title":"Introduction","text":"<p>When faced with difficult scheduling, routing, or optimization problems, traditional programming methods often don't work well. These problems are known as combinatorial optimization problems. They can have millions or billions of possible solutions. This means that brute-force approaches are not a good way to solve them.</p>"},{"location":"developer-view/ortools/#what-is-sat-solving","title":"What is SAT-Solving?","text":""},{"location":"developer-view/ortools/#the-boolean-satisfiability-problem","title":"The Boolean Satisfiability Problem","text":"<p>SAT (Boolean Satisfiability) is one of the most fundamental problems in computer science. At its core, SAT-solving asks a deceptively simple question: Given a Boolean formula, is there an assignment of true/false values to its variables that makes the entire formula true?</p> <p>For example, consider this Boolean formula: <pre><code>(A OR B) AND (NOT A OR C) AND (NOT B OR NOT C)\n</code></pre></p> <p>A SAT-solver would try to find values for A, B, and C that make this entire expression true. In this case, A=false, B=true, C=false would satisfy the formula.</p>"},{"location":"developer-view/ortools/#how-sat-solving-works","title":"How SAT-Solving Works","text":""},{"location":"developer-view/ortools/#the-search-process","title":"The Search Process","text":"<pre><code>1. Make a decision (assign a variable)\n2. Propagate consequences (what must follow?)\n3. If conflict found:\n   - Learn why the conflict occurred\n   - Backtrack and try different path\n4. If no conflict:\n   - Continue with next decision\n5. Repeat until solution found or problem proven unsatisfiable\n</code></pre>"},{"location":"developer-view/ortools/#example-simple-scheduling-problem","title":"Example: Simple Scheduling Problem","text":"<p>Consider scheduling 3 employees (A, B, C) to 2 shifts (Morning, Evening) where: - Each shift needs exactly 1 person - Employee A cannot work Evening shift</p> <p>Variables: - <code>A_Morning</code>, <code>A_Evening</code>, <code>B_Morning</code>, <code>B_Evening</code>, <code>C_Morning</code>, <code>C_Evening</code></p> <p>Constraints: <pre><code>// Each shift needs exactly one person\nA_Morning + B_Morning + C_Morning = 1\nA_Evening + B_Evening + C_Evening = 1\n\n// Employee A cannot work evening\nNOT A_Evening\n\n// Each person works at most one shift\nA_Morning + A_Evening \u2264 1\nB_Morning + B_Evening \u2264 1\nC_Morning + C_Evening \u2264 1\n</code></pre></p> <p>A SAT-solver would systematically explore assignments until finding a valid solution.</p>"},{"location":"developer-view/ortools/#googles-or-tools","title":"Google's OR-Tools","text":""},{"location":"developer-view/ortools/#basic-variables-and-constraints","title":"Basic Variables and Constraints","text":"<pre><code>from ortools.sat.python import cp_model\n\n# Create model\nmodel = cp_model.CpModel()\n\n# Variables\nx = model.new_int_var(0, 10, 'x')\ny = model.new_int_var(0, 10, 'y')\nz = model.new_bool_var('z')\n\n# Constraints\nmodel.add(x + y &lt;= 15)\nmodel.add(x &gt;= 5).only_enforce_if(z)\nmodel.add(x &lt; 5).only_enforce_if(z.not())\n\n# Objective\nmodel.maximize(x + 2*y)\n</code></pre>"},{"location":"developer-view/ortools/#advanced-constraints","title":"Advanced Constraints","text":"<p>CP-SAT provides specialized constraints for common patterns:</p> <pre><code># All different constraint\nmodel.add_all_different([x1, x2, x3, x4])\n\n# Cumulative constraint (resource scheduling)\nmodel.add_cumulative(starts, durations, demands, capacity)\n\n# Table constraint (allowed combinations)\nmodel.add_allowed_assignments([x, y, z],\n    [(1, 2, 0), (2, 3, 1), (3, 1, 0)])\n\n# Circuit constraint (routing problems)\nmodel.add_circuit(nexts)\n</code></pre>"},{"location":"developer-view/ortools/#solving-process","title":"Solving Process","text":"<pre><code># Create solver\nsolver = cp_model.CpSolver()\n\n# Optional: Set solving parameters\nsolver.parameters.max_time_in_seconds = 60.0\nsolver.parameters.num_search_workers = 8\n\n# Solve\nstatus = solver.solve(model)\n\n# Check results\nif status == cp_model.OPTIMAL:\n    print(f'x = {solver.value(x)}')\n    print(f'y = {solver.value(y)}')\n    print(f'Objective = {solver.objective_value}')\n</code></pre>"},{"location":"developer-view/timeoffice/","title":"TimeOffice","text":"<p>Hint</p> <p>This section is relevant for users who have access to a version of TimeOffice.</p> <p>Our application is designed to seamlessly integrate with the TimeOffice platform. It can not only fetch data from a TimeOffice database but also write solutions back into the program.</p> <p>To streamline this process, we have automated the integration using the \"Wand\" button in TimeOffice. When configured correctly, this button activates a batch script located at <code>src/run.bat</code>, allowing for efficient data handling without the need for manual intervention.</p> src/run.bat<pre><code>uv run --env-file .env staff-scheduling delete %3 %1 %2\nuv run --env-file .env staff-scheduling fetch %3 %1 %2\nuv run --env-file .env staff-scheduling solve %3 %1 %2 --timeout 300\nuv run --env-file .env staff-scheduling insert %3 %1 %2\n</code></pre>"},{"location":"developer-view/conditions/every-second-weekend-free/","title":"Every second weekend free","text":"<p>Rewards if an employee has every second weekend (Sat, Sun) free.</p> <p>Feature Request</p> <p>In the final presentation of our project another implemenation of Free Days Near Weekend was requested. This is our new, complementary objective, but there is room for improvement. More details can be found in this open issue.</p>"},{"location":"developer-view/conditions/every-second-weekend-free/#implemented-using-googles-or-tools","title":"Implemented using Google's OR Tools","text":"src/cp/objectives/every_second_weekend_free.py<pre><code># Penalty = 1 if (w1_free AND w2_free) OR (NOT w1_free AND NOT w2_free)\nmodel.add(same_status_penalty == 1).only_enforce_if([w1_free, w2_free])\nmodel.add(same_status_penalty == 1).only_enforce_if(\n    [w1_free.Not(), w2_free.Not()]\n)\nmodel.add(same_status_penalty == 0).only_enforce_if(\n    [w1_free, w2_free.Not()]\n)\nmodel.add(same_status_penalty == 0).only_enforce_if(\n    [w1_free.Not(), w2_free]\n)\n\npenalties.append(same_status_penalty)\n</code></pre> <p>Our application will iterate through every pair of consective weekends. If both weekends have the same status, meaning both are free or both are assigned, it gets a penalty. That way we encourage weekends with different status, enforcing a alternating behaviour, if possible.</p>"},{"location":"developer-view/conditions/free-day-after-night-shift-phase/","title":"Free day after night shift phase","text":"<p>Likelihood of Confusion</p> <p>Different then the constraint Free days after Night Shift Phase.</p> <p>According to recommendations for the healthy organization of night and shift work, workers should have at least 24 hours of free time after a night shift. This ensures that workers have sufficient rest after a night shift. Therefore, if an employee works the night shift today and does not work the night shift tomorrow, they must take the day off.</p> <p>Bug</p> <p>In the final presentation of our project a bug was found, possibly regarding this implementation. One other constraint could also be the source of this bug. More details can be found in this open issue.</p>"},{"location":"developer-view/conditions/free-day-after-night-shift-phase/#implemented-using-googles-or-tools","title":"Implemented using Google's OR Tools","text":"src/cp/constraints/free_day_after_night_shift_phase.py<pre><code>model.add(day_tomorrow_variable == 0).only_enforce_if(\n    [night_shift_today_variable, night_shift_tomorrow_variable.Not()]\n)\n</code></pre> <p>For each non hidden employee and each day we enforce the next day to be free (<code>day_tomorrow_variable == 0</code>) if we got a night shift today, but not tomorrow, meaning the night shift phase ends.</p>"},{"location":"developer-view/conditions/free-days-after-night-shift-phase-objective/","title":"Free days after night shift phase","text":"<p>Likelihood of Confusion</p> <p>Different then the constraint Free day after Night Shift Phase.</p> <p>There is also a constraint (soft) called Free day after night shift phase, which ensures that there are at least 24h free after a night shift phase. This objective promotes anthoher 24h free after night shift phase (in total 48h, meaning two days).</p>"},{"location":"developer-view/conditions/free-days-after-night-shift-phase-objective/#implemented-using-googles-or-tools","title":"Implemented using Google's OR Tools","text":"src/cp/objectives/free_days_after_night_shift_phase.py<pre><code>model.add(penalty_var == 1).only_enforce_if(\n    [night_var, next_day_var.Not(), after_next_day_var]\n)\nmodel.add(penalty_var == 0).only_enforce_if(night_var.Not())\n\npenalties.append(penalty_var)\n</code></pre> <p>For each employee who is not hidden, we are looking at their work schedule over several days. A penalty will be applied under the following circumstances:</p> <ol> <li>The employee works a night shift on one day.</li> <li>The next day, the employee does not have any shifts scheduled (i.e., they have a day off).</li> <li>On the day after that, the employee has a shift scheduled again.</li> </ol> <p>If all these conditions are met, then a penalty is enforced.</p>"},{"location":"developer-view/conditions/free-days-near-weekend/","title":"Free days near weekend","text":"<p>A schedule is found that increases the number of free days near weekends (Fri, Sat, Sun, Mon) for employees.</p> <p>Feature Request</p> <p>In the final presentation of our project another implemenation of this was requested. More details can be found in this open issue.</p>"},{"location":"developer-view/conditions/free-days-near-weekend/#implemented-using-googles-or-tools","title":"Implemented using Google's OR Tools","text":"src/cp/objectives/free_days_near_weekend.py<pre><code>return sum(\n    [\n        sum(possible_free_first_day_variable) * -1 * self.weight,\n        sum(possible_free_second_day_variables) * -1 * self.weight,\n        sum(possible_free_both_days_variables) * -4 * self.weight,\n    ]\n)\n</code></pre> <p>The current implementation adds a reward for each free Friday, Saturday, or Sunday. Additionally, the day after one of those days gets a \"reward\" when it is free. When both days are free, a higher reward is given.</p>"},{"location":"developer-view/conditions/hierarchy-of-intermediate-shifts/","title":"Hierarchy of intermediate shifts","text":"<p>Intermediate shifts are assigned once the minimum staffing requirement is met and sufficient personnel resources are available. The assignment of these shifts follows a specific pattern: we prioritize one shift per day for each weekday, followed by weekend shifts. After that, we aim to assign two shifts on weekdays, and then again on weekends.</p> <p>In cases where two or more intermediate shifts are scheduled in a single day, the station management will convert them into early and late shifts, as these options tend to be more popular among staff. However, it\u2019s important to note that this conversion process is currently manual and not automated by our application.</p>"},{"location":"developer-view/conditions/hierarchy-of-intermediate-shifts/#implemented-using-googles-or-tools","title":"Implemented using Google's OR Tools","text":"src/cp/constraints/hierarchy_of_intermediate_shifts.py<pre><code>model.add(\n    num_of_weekday_intermediate_shifts_variable\n    &gt;= num_of_weekend_intermediate_shifts_variable\n)\nmodel.add(\n    num_of_weekday_intermediate_shifts_variable\n    - num_of_weekend_intermediate_shifts_variable\n    &lt;= 1\n)\n</code></pre> <p>The implementation of this constraint does only work in combination with another objective Free Days Near Weekend. To somehow ensure the correct hierarchy of the assigning of the intermediate shifts we focus on the total number of intermediate shifts during the week is always greater by 1 than the total number of intermediate shifts on the weekend.</p> <p>Warning</p> <p>Our implementation of this condition is not ideal. The first attempt to penalties intermediate shift on weekday and weekend was effective when used in isolation, but in combination with another objective Free Days near Weekend it did not achieve the desired results. The current implementation does not directly enforce the strict hierachy that is desired.</p>"},{"location":"developer-view/conditions/max-one-shift-per-day/","title":"Max one shift per day","text":"<p>Each employee is permitted to work only one shift per day. It is important to note that a night shift counts as part of the day on which it begins.</p>"},{"location":"developer-view/conditions/max-one-shift-per-day/#implemented-using-googles-or-tools","title":"Implemented using Google's OR Tools","text":"src/cp/constraints/max_one_shift_per_day.py<pre><code>for employee in self._employees:\n    if employee.hidden:\n        continue\n\n    for day in self._days:\n        model.add_at_most_one(\n            variables[EmployeeDayShiftVariable.get_key(employee, day, shift)]\n            for shift in self._shifts\n        )\n</code></pre> <p>For each non hidden employee, for each day, allow at most one of the shift variables.</p>"},{"location":"developer-view/conditions/maximize-wishes/","title":"Maximize Wishes","text":"<p>We try to grant as many wishes of the employees as possible. The employee can wish for a free shift or a complete free day. In our visualization wishes are also shown:</p> <ul> <li>colored small diamond: employee wishes to have shift corresponding to the color off</li> <li>brown triangle: employee wished to have the whole day off</li> <li>green background: wish for specific shift off was granted</li> <li>yellow background: wish for complete day off was granted</li> </ul>"},{"location":"developer-view/conditions/maximize-wishes/#implemented-using-googles-or-tools","title":"Implemented using Google's OR Tools","text":"src/cp/objectives/maximize_wishes.py<pre><code>model.Add(penalty == 1).OnlyEnforceIf(var)\nmodel.Add(penalty == 0).OnlyEnforceIf(var.Not())\npenalties.append(penalty)\n</code></pre> <p>For each non hidden employee we penalties all wished shifts or days that are not granted. <code>var</code> in this case means that the employee has to work the wished day or wished shift.</p>"},{"location":"developer-view/conditions/min-rest-time/","title":"Minimum rest time","text":"<p>According to Occupational Health and Safety Law (Arbeitsschutzgesetz) the minimum rest time for normal employees need to be at least 11 hours. In hospitals there can be exception to this rule. We did not implement a solution that can vary the minimum rest time, but we just do not allow an early shift following a late shift, because then the rest time would only be 9 hours.</p>"},{"location":"developer-view/conditions/min-rest-time/#implemented-using-googles-or-tools","title":"Implemented using Google's OR Tools","text":"src/cp/constraints/min_rest_time.py<pre><code>late_today = variables[\n    EmployeeDayShiftVariable.get_key(\n        employee, day, self._shifts[Shift.LATE]\n    )\n]\nnot_early_tomorrow = variables[\n    EmployeeDayShiftVariable.get_key(\n        employee, day + timedelta(1), self._shifts[Shift.EARLY]\n    )\n].Not()\nmodel.add_implication(late_today, not_early_tomorrow)\n</code></pre> <p>If <code>late_today</code> is true, then also <code>not_early_tomorrow</code> needs to be true.</p>"},{"location":"developer-view/conditions/minimize-hidden-employees/","title":"Minimize hidden employees","text":"<p>Hidden employees are employees that do not exist. Shifts should only be assigned to them if otherwise a valid solution cannot be found. This for example happens, if there is a shortage on skilled employees. Hidden employees do not have the same rules as real employees, they can work multiple shifts per day. They should indicate how many employees / how many shifts are missing to get a valid schedule.</p>"},{"location":"developer-view/conditions/minimize-hidden-employees/#implemented-using-googles-or-tools","title":"Implemented using Google's OR Tools","text":"src/cp/objectives/minimize_hidden_employees.py<pre><code>    possible_hidden_employee_variables.append(possible_hidden_employee_variable)\n\nreturn sum(possible_hidden_employee_variables) * self._weight\n</code></pre> <p>We minimize the total number of assigned shifts of all hidden employees.</p>"},{"location":"developer-view/conditions/minimize-number-of-consecutive-night-shifts/","title":"Minimize number of consecutive night shifts","text":"<p>The aim is to minimize the length of night shift phases, defined as consecutive night shifts occurring one after another.</p>"},{"location":"developer-view/conditions/minimize-number-of-consecutive-night-shifts/#implemented-using-googles-or-tools","title":"Implemented using Google's OR Tools","text":"src/cp/objectives/minimize_consecutive_night_shifts.py<pre><code>penalties.append(\n    sum(possible_night_shift_phase_variables) * (self._weight**phase_length)\n)\n</code></pre> <p>For each non hidden employee we create variables that show potential night shift phases, meaning multiple night shifts after each other. The sum of those (meaning the number how many of those are assigned) is weighed. For longer phase length the weight is increased exponentially, penaltising long night shifts quite heavily.</p>"},{"location":"developer-view/conditions/minimize-overtime-and-undertime/","title":"Minimize overtime and undertime","text":"<p>The goal is to minimize both overtime and undertime to ensure a fair and equitable distribution of work among employees. Hard limits are established, as outlined in the section on Target Working Time per Month.</p>"},{"location":"developer-view/conditions/minimize-overtime-and-undertime/#implemented-using-googles-or-tools","title":"Implemented using Google's OR Tools","text":"src/cp/objectives/minimize_overtime.py<pre><code>    model.add_abs_equality(\n        possible_overtime_variable,\n        sum(possible_working_time) - target_working_time,\n    )\n    ...\nreturn sum(possible_overtime_absolute_variables) * self._weight\n</code></pre> <p>Each minute of overtime or undertime is punished with a negative score in the objective function.</p>"},{"location":"developer-view/conditions/minimum-number-of-staff-per-shift/","title":"Minimum number of staff per shift","text":"<p>Each shift has a minimum required number of staff. This is a hard constraint that must be met. The goal is to ensure that the required number of qualified staff members are present for each shift. Therefore, the total number of staff members assigned to a shift must be equal to the required number of staff for that shift. If there are additional ressources, the fourth kind of shift, intermediate shifts, will be assigned. Qualifications are not ordered, which means, that a \"Fachkraft\" (engl. skilled worker) cannot replace an \"Azubi\" (engl. trainee).</p> <p>The required number of staff can be changed in <code>cases/{caseID}/minimal_number_of_staff.json</code>. Currently we use those numbers:</p>"},{"location":"developer-view/conditions/minimum-number-of-staff-per-shift/#fachkr\u00e4fte","title":"Fachkr\u00e4fte","text":"Mo Tu We Th Fr Sa Su Early 3 3 4 3 3 2 2 Late 2 2 2 2 2 2 2 Night 2 2 2 2 2 1 1"},{"location":"developer-view/conditions/minimum-number-of-staff-per-shift/#hilfskr\u00e4fte","title":"Hilfskr\u00e4fte","text":"Mo Tu We Th Fr Sa Su Early 2 2 2 2 2 2 2 Late 2 2 2 2 2 2 2 Night 0 0 0 0 0 1 1"},{"location":"developer-view/conditions/minimum-number-of-staff-per-shift/#azubis","title":"Azubis","text":"Mo Tu We Th Fr Sa Su Early 1 1 1 1 1 1 1 Late 1 1 1 1 1 1 1 Night 0 0 0 0 0 0 0"},{"location":"developer-view/conditions/minimum-number-of-staff-per-shift/#implemented-using-googles-or-tools","title":"Implemented using Google's OR Tools","text":"src/cp/constraints/min_staffing.py<pre><code>if min_staffing is not None:\n    model.add(sum(potential_working_staff) == min_staffing)\nelse:\n    model.add(sum(potential_working_staff) &gt;= 0)\n</code></pre> <p>For each day, shift required skill level (\"Azubi\", ...) we gather all eligible employees, get the minimum number of staff defined in <code>cases/{case_id}/minimal_number_of_staff.json</code> and collect all the corresponding variables (<code>potential_working_staff</code>). The sum of those (number of people working) needs be equal to the required number (<code>min_staffing</code>). If there is no required <code>min_staffing</code>, e.g. when there are additional special shifts (Z60), we dont restrict the solution space.</p>"},{"location":"developer-view/conditions/not-too-many-consecutive-working-days/","title":"Not too many consecutive working days","text":"<p>The aim is to minimize consecutive working days that extend to six or more, in order to prevent prolonged periods of work.</p>"},{"location":"developer-view/conditions/not-too-many-consecutive-working-days/#implemented-using-googles-or-tools","title":"Implemented using Google's OR Tools","text":"src/cp/objectives/not_too_many_consecutive_days.py<pre><code>        possible_overwork_variables.append(day_phase_variable)\n\nreturn sum(possible_overwork_variables) * self.weight\n</code></pre> <p>For each non hidden employee we create variables that show potential day phases that are longer than <code>max_consecutive_shifts</code>, meaning working multiple days after each other. <code>max_consective_shifts</code> is set to <code>MAX_CONSECUTIVE_NIGHTS</code> which is defined as <code>5</code> in <code>src/solve.py</code>. The sum of those variables corresponding to phases is weighed and used as penalty. For longer phase length the weight is increased exponentially, penaltising long night shifts quite heavily.</p> <p>Note</p> <p>Similar to Minimize Consecutive Night Shifts but without the expontential relation to the length of the phase, allowing longer phases compared to night shifts.</p>"},{"location":"developer-view/conditions/planned-shifts/","title":"Planned shifts","text":"<p>Bug</p> <p>In the final presentation of our project a bug was found, possibly regarding this implementation. One other constraint could also be the source of this bug. More details can be found in this open issue.</p>"},{"location":"developer-view/conditions/planned-shifts/#implemented-using-googles-or-tools","title":"Implemented using Google's OR Tools","text":"src/cp/constraints/planned_shifts.py<pre><code>variable_key = EmployeeDayShiftVariable.get_key(employee, day, shift)\nif variable_key in variables:\n    model.add(variables[variable_key] == 1)\n</code></pre> <p>For each planned shift we force the model to set the corresponding variable to 1, which assigns the shift.</p>"},{"location":"developer-view/conditions/rotate-shifts-forwards/","title":"Rotate shifts forwards","text":"<p>The forward shift rotation constraint requires employees to transition from earlier shifts to later shifts, promoting better health and reducing fatigue. An employee's weekly schedule should progress from early shifts to late shifts and then to night shifts, not the other way around.</p>"},{"location":"developer-view/conditions/rotate-shifts-forwards/#implemented-using-googles-or-tools","title":"Implemented using Google's OR Tools","text":"src/cp/objectives/rotate_shifts_forward.py<pre><code>model.add_bool_and(\n    [current_shift_variable, next_desired_shift_variable]\n).only_enforce_if(rotation_variable)\nmodel.add_bool_or(\n    [\n        current_shift_variable.Not(),\n        next_desired_shift_variable.Not(),\n    ]\n).only_enforce_if(rotation_variable.Not())\n\n...\n\nreturn sum(possible_rotation_variables) * -1 * self.weight\n</code></pre> <p>Rotating the shifts forward is rewarded with a positive score in the objective function.</p>"},{"location":"developer-view/conditions/rounds/","title":"Rounds (Visiten)","text":"<p>In the early shift, at least one employee must conduct a round. Employees need to have a proper qualification to conduct a round. Therefore, at least one qualified employee needs to be assigned to an early shift on workdays.</p>"},{"location":"developer-view/conditions/rounds/#implemented-using-googles-or-tools","title":"Implemented using Google's OR Tools","text":"src/cp/constraints/rounds_in_early_shift.py<pre><code>early_shift_variables = [\n    variables[\n        EmployeeDayShiftVariable.get_key(\n            employee, day, self._shifts[Shift.EARLY]\n        )\n    ]\n    for employee in qualified_employees\n]\n\nmodel.add_at_least_one(early_shift_variables)\n</code></pre> <p>For each day we collect the early shift variables of all qualified employee (see <code>cases/{case_id}/general_settings.json</code>) and restrict the model to solution where at least one of them are true.</p>"},{"location":"developer-view/conditions/target-working-time-per-month/","title":"Target working time per month","text":"<p>Each employee has an individual monthly work target. This target is considered a hard constraint because it must be met within a certain range. A maximum deviation of one day shift is allowed (\u00b17.67 hours), but this is minimized by the objective function to ensure minimal overtime/undertime. Therefore, the total working time must fall within the range of all possible shift combinations and the target working time range.</p>"},{"location":"developer-view/conditions/target-working-time-per-month/#implemented-using-googles-or-tools","title":"Implemented using Google's OR Tools","text":"src/cp/constraints/target_working_time.py<pre><code>target_working_time = employee.get_available_working_time()\nmodel.add(working_time_variable &lt;= target_working_time + TOLERANCE_MORE)\nmodel.add(working_time_variable &gt;= target_working_time - TOLERANCE_LESS)\n</code></pre> <p>For each non hidden employee create a variable representing the total work time in minutes which we restrict to being in [<code>target_working_time + TOLERANCE_LESS</code>, <code>target_working_time + TOLERANCE_MORE</code>]. The target working time is the difference between the \"SOLL\"-Time given in TimeOffice and the \"IST\"-Time in TimeOffice. Those are exported from the database and stored in <code>cases/{case_id}/target_working_minutes.json</code> as <code>target</code> and <code>actual</code>.</p> <p>Note</p> <p>Please note that we made an exception for the employee \"Milburn Loremarie\", because her <code>target-actual</code> time does not match the availabe shifts. She only has three not forbidden / not blocked days on which we need to work 30+ hours, this does not add up.</p>"},{"location":"developer-view/conditions/vacation-days-and-free-shifts/","title":"Vacation days and free shifts","text":"<p>Vacation days must remain free, and the day before a vacation day no night shift is allowed. This vacation days are automatically read from the database / TimeOffice.</p>"},{"location":"developer-view/conditions/vacation-days-and-free-shifts/#implemented-using-googles-or-tools","title":"Implemented using Google's OR Tools","text":"<p>This might be one of the easiest constraints. If an employee is unavailable for a day or shift, the corresponding variables <code>EmployeeDayVariable</code> or <code>EmployeeDayShiftVariable</code> is set to <code>0</code> (not assigned).</p> src/cp/constraints/vacation_days_and_shifts.py<pre><code>if employee.unavailable(day):\n    day_variable = variables[EmployeeDayVariable.get_key(employee, day)]\n    model.add(day_variable == 0)\n</code></pre> src/cp/constraints/vacation_days_and_shifts.py<pre><code>for shift in self._shifts:\n    if employee.unavailable(day, shift):\n        shift_variable = variables[\n            EmployeeDayShiftVariable.get_key(employee, day, shift)\n        ]\n        model.add(shift_variable == 0)\n</code></pre>"},{"location":"developer-view/database-overview/database-connection/","title":"Connection and Overview","text":""},{"location":"developer-view/database-overview/database-connection/#file-overview","title":"File Overview","text":"<p>This guide explains how to set up the connection to the TimeOffice Database using Python and credentials in the belonging <code>.env</code>-file.</p>"},{"location":"developer-view/database-overview/database-connection/#current-project-structure-for-the-database","title":"Current Project Structure for the Database","text":"<pre><code>StaffScheduling/\n\u251c\u2500\u2500  src/\n    \u2514\u2500\u2500 db/\n        \u251c\u2500\u2500 connection_setup.py  # Establishes a connection to the TimeOffice Database\n        \u251c\u2500\u2500 export_data.py       # Includes separate functions retrieving data for our algorithm\n        \u251c\u2500\u2500 export_main.py       # Collects all function calls from 'export_data.py' with an established connection\n        \u251c\u2500\u2500 import_main.py       # Collects all function calls from 'import_solution.py' with an established connection\n        \u2514\u2500\u2500 import_solution.py   # Includes separate functions importing solution data from our algorithm\n\n\u251c\u2500\u2500 .env                         # Holds credentials for the database connection\n\u2514\u2500\u2500 .env.template                # Template to put in given credentials\n</code></pre>"},{"location":"developer-view/database-overview/database-connection/#database-connection","title":"Database Connection","text":""},{"location":"developer-view/database-overview/database-connection/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.x</li> <li>A valid SQL Server ODBC driver (ODBC Driver for SQL Server (Microsoft Docs))</li> <li>TimeOffice Database credentials</li> <li><code>pyodbc</code> and <code>pandas</code> packages installed</li> </ul> <p>These should be installed already when following the <code>Getting-Started (Dev)</code>-Guide from our documentation. Otherwise check for each required prerequisite if it is installed within your local environment and install separately if needed.</p>"},{"location":"developer-view/database-overview/database-connection/#create-a-env-file","title":"Create a <code>.env</code>-File","text":"<p>In the root directory, create a copy of the <code>.env.template</code> file and rename it to <code>.env</code>. Then add your given database credentials:</p> <p><pre><code>DB_SERVER=your.database.server\nDB_NAME=your_database_name\nDB_USER=your_username\nDB_PASSWORD=your_password\n</code></pre>  (If needed, please contact one of the DB-Team-members as we do not want to publish the credentials given by Pradtke within GitHub or directly contact Pradtke)</p>"},{"location":"developer-view/database-overview/database-connection/#following-the-process-flow","title":"Following the Process Flow","text":"<p>From now on you can follow on with the commands within the <code>Getting-Started (Dev)</code>-Guide or refer to the other database documentation files for further understanding.</p>"},{"location":"developer-view/database-overview/database-queries/","title":"Queries","text":""},{"location":"developer-view/database-overview/database-queries/#database-queries","title":"Database Queries","text":"<p>Overview of the queries used to retrieve the needed personal data from the database. All of these queries can be found within the <code>export_data.py</code>-file, each capsulated in a separate function for simplified expansion.</p>"},{"location":"developer-view/database-overview/database-queries/#basic-plan-data","title":"Basic Plan Data","text":"<pre><code>SELECT\n    Prim AS 'plan_id',\n    RefPlanungseinheiten AS 'planning_unit',\n    VonDat AS 'from_date',\n    BisDat AS 'till_date'\nFROM TPlan\nWHERE RefPlanungseinheiten = {planning_unit}\n    AND VonDat = CONVERT(date,'{from_date}',23)\n    AND BisDat = CONVERT(date,'{till_date}',23)\n</code></pre> <p>We use the entity <code>TPlan</code> to retrieve the <code>plan identification number</code> of a corresponding schedule. The ID is the numeric primay key <code>Prim</code> of the entity. It is unique by a given planning unit and a period of time. <code>RefPlanungseinheiten</code> is the reference to the underlying planning unit and stored in <code>TPlanungseinheiten</code>. To get a certain id <code>VonDat</code> needs to be the first day of a month and <code>BisDat</code> the last day of a month. The <code>CONVERT</code>-function uses the style code \"23\" that specifies the date format <code>yyyy-mm-dd</code>.</p>"},{"location":"developer-view/database-overview/database-queries/#export-shift_informationjson","title":"Export shift_information.json","text":"<pre><code>SELECT\n    RefDienste AS 'shift_id',\n    Kommt AS 'start',\n    Geht AS 'end'\nFROM TDiensteSollzeiten\nWHERE RefDienste = '{shift_ids[\"Fr\u00fchschicht\"][\"id\"]}'\n    OR RefDienste = '{shift_ids[\"Sp\u00e4tschicht\"][\"id\"]}'\n    OR RefDienste = '{shift_ids[\"Nachtschicht\"][\"id\"]}'\n    OR RefDienste = '{shift_ids[\"Zwischendienst\"][\"id\"]}'\n    OR RefDienste = '{shift_ids[\"Sonderdienst\"][\"id\"]}'\n</code></pre> <p>We use the entity <code>TDiensteSollzeiten</code> to retrieve the start and end times for specific work shifts. To collect the time information a defined set of shift types (Fr\u00fchschicht, Sp\u00e4tschicht, Nachtschicht, Zwischendienst und Sonderdienst) is used. The unique identifier for a shift is a reference in <code>TDiensteSollzeiten</code> and stored in <code>RefDienste</code> as an integer. The entity contains the start <code>Kommt</code> and the end <code>Geht</code> of a shift, referenced by their shift ID. The date format is <code>yyyy-mm-dd hh-mi-ss</code>. These values are further used to compute the shift duration, break duration and the total working minutes of a shift.</p>"},{"location":"developer-view/database-overview/database-queries/#export-employeesjson","title":"Export employees.json","text":"<p><pre><code>SELECT\n    a.Prim,\n    a.Name,\n    a.Vorname,\n    a.PersNr,\n    t.Bezeichnung AS 'Beruf'\nFROM TPlanPersonal b\nJOIN TPersonal a ON b.RefPersonal = a.Prim\nLEFT JOIN TBerufe t ON a.RefBerufe = t.Prim\nWHERE RefPlan = {plan_id}\n</code></pre> We use this query to retrieve detailed information about the personal staff. The following tables are involved: - <code>TPersonal</code> (a): stores detailed employee information - <code>TPlanPersonal</code> (b): links plannings entities - <code>TBerufe</code> (t): contains short and long descriptions of occupations</p> <p>The <code>Inner Join</code> ensures that only staff information with exisiting records are included. The <code>Left Join</code> is used to receive the job description for each employees, if available. Employees without a job reference will still appear, with <code>NULL</code> in the <code>Beruf</code> column.</p> <p>For a specific <code>plan_id</code> we obtain the unique numeric primary key <code>Prim</code>, the surname <code>Name</code> and first name <code>Vorname</code>, the personnel number <code>PersNr</code> and the occupation <code>Bezeichnung</code> of all employees within the underlying work schedule.</p>"},{"location":"developer-view/database-overview/database-queries/#export-target_working_minutesjson","title":"Export target_working_minutes.json","text":"<pre><code>SELECT\n    p.PersNr,\n    p.Name AS 'name',\n    p.Vorname AS 'firstname',\n    pkt.RefKonten,\n    pkt.Wert2\nFROM TPersonalKontenJeMonat pkt\nJOIN TPersonal p ON pkt.RefPersonal = p.Prim\nWHERE (pkt.RefKonten = 1  OR pkt.RefKonten = 19 OR pkt.RefKonten = 55)\n    AND pkt.Monat = '202411'\nORDER BY p.Name asc\n</code></pre> <p>We use the entity <code>TPersonalKontenJeMonat</code> to retrieve the working hours of each employee per month. We join this entity with <code>TPersonal</code> to obtain the employee's <code>Name</code> and <code>PersNr</code>. The <code>RefKonten</code> field in the <code>TPersonalKontenJeMonat</code> entity provides the relevant type of Konto (e.g., SOLL_Monat). All types of Konten can be found in the entity <code>TKonten</code>.</p> <p>In our case these are: 1. \"1\" := SOLL_Monat (first Column in TimeOffice) 2. \"19\" := Arbeitsstunden 3. \"55\" := Total</p> <p>The tricky thing here is that the different Konten are only created when needed. For example, if an employee has not yet been scheduled in the plan, only a \"1\" Konto is present in the entity <code>TPersonalKontenJeMonat</code>. The same applies to the \"19\" and \"55\" Konten. Some employees only have a \"19\" Arbeitsstunden Konto, which represents the \"Arbeitsstunden / IST Stunden\" respectively. Other employees have both a \"19\" and a \"55\" Konto. In that case the \"55\" Konto represents the correct \"IST Stunden\" (\"19\" = \"55\" or \"19\" &lt; \"55\").</p> <p>Once we have identified the correct values using the entity <code>RefKonten</code>, we can obtain the hours from <code>Wert2</code>. Since we are using working minutes and not hours, we must multiply by 60 to get the correct number of working minutes.</p>"},{"location":"developer-view/database-overview/database-queries/#export-worked_sundaysjson","title":"Export worked_sundays.json","text":"<pre><code>SELECT\n    p.Prim,\n    p.Name AS name,\n    p.Vorname AS firstname,\n    COUNT(DISTINCT CAST(pkt.Datum AS DATE)) AS worked_sundays\nFROM TPersonalKontenJeTag pkt\nJOIN TPersonal p ON pkt.RefPersonal = p.Prim\nWHERE pkt.RefKonten = 40\n    AND pkt.Datum BETWEEN {from_date} AND {till_date}\n    AND DATENAME(WEEKDAY, pkt.Datum) = 'Sonntag'\n    AND pkt.Wert &gt; 0\nGROUP BY\n    p.Prim,\n    p.Name,\n    p.Vorname\nORDER BY\n    worked_sundays DESC\n</code></pre> <p>We use the <code>TPersonalKontenjeTag</code> table to retrieve the number of worked sunday shifts for each employee for the last 12 months. The table stores daily entries and account types per employee. The <code>Inner Join</code> links this table with <code>TPersonal</code> to receive the employees' unique primary key <code>Prim</code>, as well as the surname <code>Name</code> and the first name <code>Vorname</code>. In the following the conditions are described: - <code>pkt.RefKonten = 40</code>:  \"40\" is the account key for a sunday shift - <code>pkt.Datum BETWEEN {from_date} AND {till_date}</code>: defines the date range, in our case, of 12 months - <code>DATENAME(WEEKDAY, pkt.Datum) = 'Sonntag'</code>: filters the weekday, for this query it is <code>sunday</code> - <code>pkt.Wert &gt; 0</code>: includes only days with positive values, means actual work days</p> <p>Lastly we aggregate the worked days per employee with <code>GROUP</code> and rank them by the number of worked shifts on a sunday with <code>ORDER BY</code>.</p>"},{"location":"developer-view/database-overview/database-queries/#get-plan-dates","title":"Get plan dates","text":"<pre><code>SELECT\nCAST(VonDat AS DATE) AS 'START',\nCAST(BisDat AS DATE) AS 'END'\nFROM TPlan WHERE Prim = '{plan_id}'\n</code></pre> <p>We use the <code>TPlan</code> table to get the start and the end dates of a specific plan defined by the given plan ID <code>plan_id</code>. The date format is <code>yyyy-mm-dd</code>.</p>"},{"location":"developer-view/database-overview/database-queries/#export-free_shifts_and_vacation_daysjson","title":"Export free_shifts_and_vacation_days.json","text":""},{"location":"developer-view/database-overview/database-queries/#query-for-vacation-days","title":"Query for vacation days","text":"<pre><code>SELECT\n    p.Prim AS Prim,\n    p.Name AS name,\n    p.Vorname AS firstname,\n    pkg.Datum AS vacation_days\nFROM TPlanPersonalKommtGeht pkg\nJOIN TPersonal p ON pkg.RefPersonal = p.Prim\nWHERE pkg.Datum BETWEEN CONVERT(date,'{START_DATE}',23)\n    AND CONVERT(date,'{END_DATE}',23)\n    AND pkg.RefgAbw IN (20, 2434, 2435, 2091)\n</code></pre> <p>This SQL query retrieves a list of employees and the dates they took (additional) vacation days within a specified date range. To get these information we use the <code>TPlanPersonalKommtGeht</code> table which stores the attendance and absence records, including absence types, for each employee. To obtain the surname <code>Name</code> and the first name <code>Vorname</code> we use the <code>Inner Join</code> with the <code>TPersonal</code> table. The last column <code>vacation_days</code> stores the days when the vacation will take place. In the <code>WHERE</code> section, we first filter the records in the desired date period. The <code>CONVERT</code>-function again uses the style code \"23\" that specifies the date format <code>yyyy-mm-dd</code>. In addition, we filter the <code>RefgAbw</code> for specific vacation types: \"20\", \"2434\", \"2435\" represent a standard vacation day <code>Urlaub</code>, \"2091\" represents an additional vacation day <code>Zusatzurlaub</code>. Full-day absence are stored in <code>RefgAbw</code>.</p>"},{"location":"developer-view/database-overview/database-queries/#query-for-forbidden-days","title":"Query for forbidden days","text":"<pre><code>SELECT\n    p.Prim AS Prim,\n    p.Name AS 'name',\n    p.Vorname AS 'firstname',\n    pkg.Datum AS 'forbidden_days'\nFROM TPlanPersonalKommtGeht pkg\nJOIN TPersonal p ON pkg.RefPersonal = p.Prim\nWHERE pkg.Datum BETWEEN CONVERT(date,'{START_DATE}',23)\nAND CONVERT(date,'{END_DATE}',23)\nAND pkg.RefgAbw NOT IN (20, 2434, 2435, 2091)\n</code></pre> <p>This query is very similar to the <code>vacation query</code>. To get the information we again use the <code>TPlanPersonalKommtGeht</code> table and obtain the surname <code>Name</code> and the first name <code>Vorname</code> with the <code>Inner Join</code> with the <code>TPersonal</code> table. The difference is that for each employee, we want to retrieve the full-day absences from <code>RefgAbw</code> that are not vacation days. Therefore, the last column <code>forbidden_days</code> stores the days on which an employee is not be selected for a shift for reasons other than vacation. Other reasons could be, for example: - parental leave (absence type \"1078\") - pension (absence type \"1086\") - day off (absence type \"1089\")</p> <p>The distinction is necessary here because a vacation day has an impact on an employee's target working hours, while a day off, for example, has no impact.</p>"},{"location":"developer-view/database-overview/database-queries/#query-for-forbidden-shifts","title":"Query for forbidden shifts","text":"<pre><code>SELECT\n    p.Prim AS Prim,\n    p.Name AS 'name',\n    p.Vorname AS 'firstname',\n    pkg.Datum AS 'planned_shifts',\n    d.KurzBez AS 'dienst'\nFROM TPlanPersonalKommtGeht pkg\nJOIN TPersonal p ON pkg.RefPersonal = p.Prim\nJOIN TDienste d ON pkg.RefDienste = d.Prim\nWHERE pkg.Datum BETWEEN CONVERT(date,'{START_DATE}',23)\nAND CONVERT(date,'{END_DATE}',23)\nAND pkg.RefgAbw IS NULL\n</code></pre> <p>This query retrieves the already planned work shifts for other planning units for employees within a given time period. This means that an employee working in another planning unit is unavailable for our schedule. To do this, we again use <code>TPlanPersonalKommtGeht</code> and <code>TPersonal</code> for the same information, as well as <code>TDienste</code> to identify the already planned shift. To obtain the desired records, i.e., the actual scheduled shifts, we exclude all absence records, with <code>RefgAbw</code> set to <code>NULL</code>. This means that the employees are already scheduled to work.</p>"},{"location":"developer-view/database-overview/database-queries/#query-for-accounting-entries","title":"Query for accounting entries","text":"<pre><code>SELECT\n    RefPersonal AS Prim,\n    Datum\nFROM  TPersonalKontenJeTag\nWHERE RefPlanungsEinheiten = {planning_unit}\nAND Datum BETWEEN CONVERT(date,'{START_DATE}',23)\nAND CONVERT(date,'{END_DATE}',23)\n</code></pre> <p>We use <code>TPersonalKontenJeTag</code> to retrieve the present days of the employees of a desired planning unit. The <code>CONVERT</code>-function again uses the style code \"23\" that specifies the date format <code>yyyy-mm-dd</code>.</p>"},{"location":"developer-view/database-overview/database-tables/","title":"Tables","text":""},{"location":"developer-view/database-overview/database-tables/#overview-of-utilized-database-tables","title":"Overview of utilized Database tables","text":"<p>To get a better overlook of the referenced tables within the TIMEOFFICE database, each one is listed with a general description of its usage and all defined entries. A complete visual of the relations is shown in the picture below.</p>"},{"location":"developer-view/database-overview/database-tables/#visualization-of-table-relations","title":"Visualization of table relations","text":""},{"location":"developer-view/database-overview/database-tables/#tplan","title":"TPlan","text":"<p>TPlan describes the set of working schedule managed in TIMEOFFICE. A working schedule is always assigned to a planning unit (Planungseinheit) and a time period. The time period is determined by the planning interval of the underlying planning unit.</p> Attribute Description Data type Prim Unique numeric primary key int RefPlanungseinheiten Reference to the underlying planning unit, TPlanungseinheiten.Prim int VonDat Start time of planning datetime BisDat End time of planning datetime RefStati The status in which the work schedule is located. Reference to STStati (sic!) The most relevant statuses are 20 (TARGET), 50 (ACTUAL) and 70 (COMPLETED) or 80 (OVERDUE). Schedules in status 20 are in target planning, i.e. are currently still being planned prospectively. Plans with status 50 are in the actual planning stage; as a rule, failures are documented here and rescheduling is carried out. Plans with status 70 have been committed and can no longer be changed; status 80 indicates that a plan with status 70 has already been settled. int RefPlanungsIntervalle The planning interval of the plan. Reference to STPlanungsIntervalle (de facto only relevant: 1 = monthly planning, 3 = annual planning) See also TPlanungseinheiten.RefPlanungsintervalle. Special: A planning unit can (and often will) have both plans with status 1 AND 3. Planning interval 3 is then the annual plan, in which long-term absence planning usually takes place. The actual work schedule then have interval 1. int"},{"location":"developer-view/database-overview/database-tables/#tplanpersonal","title":"TPlanPersonal","text":"<p>TPlanPersonal describes the assignment of an employee to a specific work schedule.</p> Attribute Description Data type Prim Unique numeric primary key int RefPlan Reference to the underlying work schedule, TPlan.Prim int RefPersonal Reference to the underlying employee, TPersonal.Prim int RefBerufe Occupation of the employee on the plan, TBerufe.Prim int VonDat Start of the employee's assignment, always within the plan limits datetime BisDat End of the employee's assignment, always within the plan limits datetime IstVonErsatz Indicator as to whether it is a substitute assignment bit"},{"location":"developer-view/database-overview/database-tables/#tpersonal","title":"TPersonal","text":"<p>TPersonal describes the master data of an individual employee.  #### This table contains many fields that are now obsolete.</p> Attribute Description Data type Prim Unique numeric primary key int PersNr Personnel number of the employee nvarchar(255) Name Surname of the employee nvarchar(255) Vorname First name of the employee nvarchar(255) GebDat Date of birth of the employee datetime EinDat Date on which the employee joined the company. Hiring date datetime AusDat Date on which the employee leaves the company. Dismissal date datetime RefGeschlechter Reference to STGeschlechter. 1 male, 2 female, 3 diverse. int RefFamilienstand Marital status of the employee. Reference to TKataloge, RefKatalogArt 1 int RefBerufe The training occupation of the employee. Reference to TBerufe. int RefEinrichtungen The institution to which this employee is assigned. int"},{"location":"developer-view/database-overview/database-tables/#tplanpersonalkommtgeht","title":"TPlanPersonalKommtGeht","text":"<p>TPlanPersonalKommtGeht describes the individual assignments of an employee on a work schedule. These are available in different statuses, so that it is possible in principle to make comparisons, e.g. between target and actual planning.</p> Attribute Description Data type RefPlan Reference to the underlying work schedule, TPlan.Prim int RefPersonal Reference to the underlying employee, TPersonal.Prim int Datum The day on which the shift is performed. datetime RefStati The status of the plan to which these \"Kommt-Geht-Zeile\" belong. To read the planning data from the TARGET status, the data records contained must be filtered to RefStati == 20. int LfdNr Consecutive numbering of the assignments within the status and day of this employee int RefgAbw/RefDienste/RefDienstAbw These three fields indicate which shift applies to the employee in the context of this \"Kommt-Geht-Zeile\". The logic is as follows: If an employee performs a shift and no other restrictions apply, RefServices contains the primary key of the service performed (TDienste.Prim). If a partial-day absence is planned for an employee and no other restrictions apply, RefDienstAbw contains the primary key of the absence (TDienste.Prim). If a full-day absence applies to an employee, RefgAbw is always filled with the corresponding absence shift. In addition, RefDienste OR RefDienstAbw is filled. This occurs, for example, if an employee had planned an early shift (= early shift in RefDienste), but then fell ill and a sick day was entered via the early shift (sick shift in RefgAbw) The same applies to the combination with an absence in RefDienstAbw. To simplify the interpretation, you can say: If there is something in RefgAbw, then this value applies. If there is nothing there, then you must look in RefDienstAbw. If there is nothing there either, the value must be read from RefDienste. int VonZeit The time at which the shift begins datetime BisZeit The time at which the shift ends datetime BereitVon If it is an on-call duty, the duty times worked can be documented within a planned on-call duty. In these cases, ReadyFrom / ReadyTo is filled datetime BereitBis If it is an on-call duty, the hours worked can be documented within a planned on-call duty. In these cases, ReadyFrom / ReadyTo is filled datetime"},{"location":"developer-view/database-overview/database-tables/#tpersonalkontenjetag","title":"TPersonalKontenJeTag","text":"<p>TPersonalKontenJeTag describes the different daily account types per employee. Holiday days, night shifts and other important data can be taken from here via the external key RefPersonal (for example, the holiday as key number 85 or night shift as key 20 in the RefAccounts field).</p> Attribute Description Data type RefPersonal Reference to the underlying employee, TPersonal.Prim int Datum Date of the referring account datetime RefKonten Reference to the specific account, TKonten.Prim int Wert Count of hours within the referred account for the employee float RefPlanungsEinheiten Reference to which planning entity the account belongs to int RefBerufe Reference to the belonging profession int RefKstNr Reference to the cost centre (old) nvarchar (255) RefKostenStellen Reference to the cost centre (new) int WertSoll The calculated VBA value of the account when the plan was &lt; status 40 float"},{"location":"developer-view/database-overview/database-tables/#tpersonalkontenjewoche","title":"TPersonalKontenJeWoche","text":"<p>TPersonalKontenJeWoche describes the different weekly account types per employee. The count of working hours can be accessed with key 19. The count of total services can be accessed with key 67. The important value for each week is then written in column Wert2.</p> Attribute Description Data type RefPersonal Reference to the underlying employee, TPersonal.Prim int Woche Corresponding week of the account in the format year-week (202435) int RefKonten Reference to the specific account, TKonten.Prim int Wert1 Count within the referred account of the specific week in state 1 for the employee float Wert2 Count within the referred account of the specific week in state 2 for the employee float Wert3 Count within the referred account of the specific week in state 3 for the employee float Wert4 Count within the referred account of the specific week in state 4 for the employee float Wert5 Count within the referred account of the specific week in state 5 for the employee float Wert6 Count within the referred account of the specific week in state 6 for the employee float Wert7 Count within the referred account of the specific week in state 7 for the employee float Wert8 Count within the referred account of the specific week in state 8 for the employee (new) float Wert8Alt Count within the referred account of the specific week in state 8 for the employee (old) float SumWert1 Cumulative count within the referred account of the specific week in state 1 for the employee float SumWert2 Cumulative count within the referred account of the specific week in state 2 for the employee float SumWert3 Cumulative count within the referred account of the specific week in state 3 for the employee float SumWert4 Cumulative count within the referred account of the specific week in state 4 for the employee float SumWert5 Cumulative count within the referred account of the specific week in state 5 for the employee float SumWert6 Cumulative count within the referred account of the specific week in state 6 for the employee float SumWert7 Cumulative count within the referred account of the specific week in state 7 for the employee float SumWert8 Cumulative count within the referred account of the specific week in state 8 for the employee (new) float SumWert8Alt Cumulative count within the referred account of the specific week in state 8 for the employee (old) float RefStationOnSave Reference to the state int"},{"location":"developer-view/database-overview/database-tables/#tpersonalkontenjemonat","title":"TPersonalKontenJeMonat","text":"<p>TPersonalKontenJeWoche describes the different monthly account types per employee. The count of target working hours can be accessed with key 1 and the important value for each month is then written in column Wert2.</p> Attribute Description Data type RefPersonal Reference to the underlying employee, TPersonal.Prim int Monat Corresponding month of the account in the format year-month (202411) int RefKonten Reference to the specific account, TKonten.Prim int Wert1 Count within the referred account of the specific week in state 1 for the employee float Wert2 Count within the referred account of the specific week in state 2 for the employee float Wert3 Count within the referred account of the specific week in state 3 for the employee float Wert4 Count within the referred account of the specific week in state 4 for the employee float Wert5 Count within the referred account of the specific week in state 5 for the employee float Wert6 Count within the referred account of the specific week in state 6 for the employee float Wert7 Count within the referred account of the specific week in state 7 for the employee float Wert8 Count within the referred account of the specific week in state 8 for the employee (new) float Wert8Alt Count within the referred account of the specific week in state 8 for the employee (old) float RefStationOnSave Reference to the state int"},{"location":"developer-view/database-overview/database-tables/#tdienste","title":"TDienste","text":"<p>TDienste describes the shifts that can be entered in the work schedule. In combination with TDiensteSollzeiten, this results in the working times scheduled for an employee.</p> Attribute Description Data type Prim Unique numeric primary key int KurzBez Short name of the shift nvarchar(255) Bezeichnung Long name of the shift nvarchar(255) RefDienstTypen Refers to the service type from STDienstTypen.  1 = normal, 100 = absence, ... int RefDiensteStatistikGruppen Group in which a service is classified.  Reference to TDiensteStatistikGruppen.Prim. Highly relevant for calculation. Classics are 1 = early shift, 2 = late shift, 3 = night shift int"},{"location":"developer-view/database-overview/database-tables/#tdienstesollzeiten","title":"TDiensteSollzeiten","text":"<p>TDiensteSollzeiten describes the given target times of various services. Different types become important within the internship, which can be selected using the connection to TDienste via RefDienste: Late shift (2947), early shift (2939), night shift (2953) and intermediate shift (2906). The times and breaks can be calculated via Kommt and Geht.</p> Attribute Description Data type RefTagTypGruppen Reference to weekday int RefDienste Reference to a specific service type int Kommt Time when the shift starts datetime ZusatzOption Additional information (e.g. different handling before other days) int Geht Time when shift ends datetime Minuten Total time in minutes int Tag Count of total days within shift nvarchar (255) IstBereitschaft Whether the shift is standby bit Wert Fixed rate for standby duties float"},{"location":"developer-view/database-overview/database-tables/#tplanungseinheiten","title":"TPlanungseinheiten","text":"<p>TPlanungseinheiten describe the number of possible locations of a facility. It can be imagined as a ward in a hospital where work is carried out directly.</p> Attribute Description Datatype Prim Unique numeric primary key int KurzBez Short name of the planning unit nvarchar(255) Bezeichnung Long name of the planning unit nvarchar(255) RefPlannungsIntervalle The planning interval of the planning unit. Reference to STPlanungsIntervalle (de facto only relevant: 1 = monthly planning, 3 = annual planning) int StartDat The time at which the planning unit begins operationally. datetime RefEinrichtungen Reference to the associated facility int IstPoolPlanungeinheit Indicator as to whether it is a pool planning unit. Special rules apply to these, ignore for now. bit AblaufDat Expiration date of the planning unit; set if this planning unit ceases operations at some point, NULL otherwise. datetime"},{"location":"developer-view/database-overview/database-tables/#tplanungseinheitenpersonal","title":"TPlanungseinheitenPersonal","text":"<p>TPlanungseinheitenPersonal describes the assignment of employees to planning units, in the sense of: Which employee should be assigned where and when.</p> Attribute Description Data type RefPersonal Reference to primary key TPersonal.Prim int RefPlanungseinheiten Reference to primary key TPlanungseinheiten.Prim int RefBerufe The activity in which the employee is assigned to this planning unit. Reference to primary key TBerufe.Prim int VonDat From when this employee is assigned to this planning unit datetime BisDat Until when this employee is assigned to this planning unit datetime IstVonErsatz Indicator of whether the assignment is a substitute assignment, i.e. whether the employee was assigned as a substitute by their actual PE. bit IstHeimat Indicator whether the assignment is to the employee's \"home station\". Can be understood as the \"main\" planning unit where the employee is also accounted for. There can only be ONE home station assignment at any given time. bit"},{"location":"developer-view/database-overview/database-tables/#tkataloge","title":"TKataloge","text":"Attribute Description Data type Prim Unique numeric primary key int Bez Name of the facility nvarchar(255) RefKatalogArt The type of catalog; reference to STKatalogArten (1 = family statuses, 2 = contract types, ...) int RefEinrichtungen The facility to which this catalog entry belongs.  Refers to TEinrichtungen. int"},{"location":"developer-view/database-overview/database-tables/#teinrichtungen","title":"TEinrichtungen","text":"<p>TEinrichtungen describes the different facilities managed in a database. These facilities exist in order to be able to logically isolate data from one another. This is done in the relevant tables via a foreign key on TEinrichtungen.Prim; the corresponding attribute is usually named RefEinrichtung. If the corresponding data is then to be read for a facility, the corresponding tables must always be read with a constraint on RefEinrichtung = [TEinrichtung.Prim].</p> <p>#### There are only two facilities in the St. Marien-Krankenhaus database; facility 1 and the global facility 999. Therefore, a specific consideration of the facility structure is probably unnecessary.</p> Attribute Description Data type Prim Unique numeric primary key int Bez Name of the facility nvarchar(255) AktivJN Boolflag, which indicates whether the facility is still actively in operation bit AktivVon Spans a period in which the facility is in operation with AktivBis datetime AktivBis Spans a period in which the facility is in operation with AktivVon datetime"},{"location":"developer-view/how-to-add/","title":"How-to-Add Guides","text":""},{"location":"developer-view/how-to-add/#introduction","title":"Introduction","text":"<p>This chapter provides step-by-step guides for extending the shift scheduling system with new components. The system is designed to be modular and extensible, allowing you to add custom logic for your specific scheduling requirements.</p>"},{"location":"developer-view/how-to-add/#overview","title":"Overview","text":"<p>The shift scheduling system has three main extensible components:</p>"},{"location":"developer-view/how-to-add/#variables","title":"Variables","text":"<p>Decision elements that the solver can set when creating a schedule. Variables represent choices like \"Does employee X work shift Y on day Z?\".</p>"},{"location":"developer-view/how-to-add/#constraints","title":"Constraints","text":"<p>Rules and requirements that must be satisfied in any valid schedule. Constraints define what is allowed or forbidden, such as \"An employee cannot work more than 8 hours per day\".</p>"},{"location":"developer-view/how-to-add/#objectives","title":"Objectives","text":"<p>Goals to optimize when multiple valid schedules exist. Objectives define what makes one schedule better than another, such as \"Minimize overtime hours\".</p>"},{"location":"developer-view/how-to-add/#when-to-add-each-component","title":"When to Add Each Component","text":""},{"location":"developer-view/how-to-add/#adding-variables","title":"Adding Variables","text":"<ul> <li>You need to track new decision points in your scheduling problem</li> <li>You want to introduce new types of assignments or allocations</li> <li>You need intermediate calculations that other constraints or objectives will reference</li> </ul>"},{"location":"developer-view/how-to-add/#adding-constraints","title":"Adding Constraints","text":"<ul> <li>You have new business rules or requirements that must be enforced</li> <li>You need to ensure certain scheduling patterns are followed or avoided</li> <li>You want to add compliance requirements or safety regulations</li> </ul>"},{"location":"developer-view/how-to-add/#adding-objectives","title":"Adding Objectives","text":"<ul> <li>You want to optimize for new criteria beyond existing goals</li> <li>You need to balance competing priorities in your scheduling decisions</li> <li>You want to improve specific aspects of schedule quality</li> </ul> <p>For more information about the overall system architecture, see the Codebase Overview.</p>"},{"location":"developer-view/how-to-add/how-to-add-constraint/","title":"How to add a Constraint","text":""},{"location":"developer-view/how-to-add/how-to-add-constraint/#adding-a-new-constraint-to-the-staff-scheduling-system","title":"Adding a New Constraint to the Staff Scheduling System","text":"<p>This guide explains how to create and integrate a new constraint into the staff scheduling system.</p>"},{"location":"developer-view/how-to-add/how-to-add-constraint/#overview","title":"Overview","text":"<p>Constraints are rules that must be satisfied in the generated shift plans. They ensure legal requirements and company policies. Also specific customer rules can be implemented.</p>"},{"location":"developer-view/how-to-add/how-to-add-constraint/#step-1-create-the-constraint-class","title":"Step 1: Create the Constraint Class","text":"<p>Create a new Python file in the <code>cp/constraints/</code> directory:</p> <pre><code># cp/constraints/your_new_constraint.py\nfrom . import Constraint\nfrom employee import Employee\nfrom day import Day\nfrom shift import Shift\nfrom ..variables import Variable, EmployeeDayShiftVariable\nfrom ortools.sat.python.cp_model import CpModel\nimport logging\n\n\nclass YourNewConstraint(Constraint):\n    KEY = \"your-constraint-key\"  # Unique identifier for CLI usage\n\n    def __init__(self, employees: list[Employee], days: list[Day], shifts: list[Shift]):\n        \"\"\"\n        Initialize your constraint with necessary data.\n        \"\"\"\n        super().__init__(employees, days, shifts)\n        # Add any additional initialization here\n\n    def create(self, model: CpModel, variables: dict[str, Variable]):\n        \"\"\"\n        Define the constraint logic using OR-Tools.\n        This method is called during model creation.\n        \"\"\"\n        # Your constraint implementation here\n        pass\n</code></pre>"},{"location":"developer-view/how-to-add/how-to-add-constraint/#step-2-implement-the-constraint-logic","title":"Step 2: Implement the Constraint Logic","text":"<p>The <code>create</code> method is where you define your constraint using OR-Tools CP-SAT API:</p> <pre><code>def create(self, model: CpModel, variables: dict[str, Variable]):\n    for employee in self._employees:\n        for day in self._days:\n            # Example: Limit shifts per week\n            week_shifts = []\n            for shift in self._shifts:\n                variable_key = EmployeeDayShiftVariable.get_key(employee, day, shift)\n                if variable_key in variables:\n                    week_shifts.append(variables[variable_key])\n\n            # Add constraint to model\n            model.add(sum(week_shifts) &lt;= 5)  # Max 5 shifts per week\n</code></pre>"},{"location":"developer-view/how-to-add/how-to-add-constraint/#step-3-export-the-constraint","title":"Step 3: Export the Constraint","text":"<p>Add your constraint to the <code>__init__.py</code> files:</p> <p><pre><code># cp/constraints/__init__.py\nfrom .your_new_constraint import YourNewConstraint as YourNewConstraint\n</code></pre> <pre><code># cp/__init__.py\nfrom .constraints import (\n    ...\n    YourNewConstraint as YourNewConstraint\n)\n</code></pre></p>"},{"location":"developer-view/how-to-add/how-to-add-constraint/#step-4-register-in-solvepy","title":"Step 4: Register in solve.py","text":"<p>Add your constraint to the main solver script:</p> <pre><code># solve.py\nfrom cp import (\n    # ... existing imports ...\n    YourNewConstraint,\n)\n\ndef main():\n    cli = CLIParser([\n        # ... existing constraints ...\n        YourNewConstraint,\n    ])\n\n    # ...\n\n    constraints = [\n        # ... existing constraints ...\n        YourNewConstraint(employees, days, shifts),\n    ]\n</code></pre>"},{"location":"developer-view/how-to-add/how-to-add-objective/","title":"How to add a Objective","text":""},{"location":"developer-view/how-to-add/how-to-add-objective/#adding-a-new-objective-to-the-shift-scheduling-system","title":"Adding a New Objective to the Shift Scheduling System","text":"<p>This guide explains how to create and integrate a new objective into the shift scheduling system.</p>"},{"location":"developer-view/how-to-add/how-to-add-objective/#overview","title":"Overview","text":"<p>Objectives define what the solver should optimize when generating shift plans. They can minimize undesirable outcomes (like overtime) or maximize desirable ones (like employee satisfaction). Multiple objectives can be combined with different weights to balance competing goals.</p>"},{"location":"developer-view/how-to-add/how-to-add-objective/#step-1-create-the-objective-class","title":"Step 1: Create the Objective Class","text":"<p>Create a new Python file in the <code>cp/objectives/</code> directory:</p> <pre><code># cp/objectives/your_new_objective.py\nfrom . import Objective\nfrom employee import Employee\nfrom day import Day\nfrom shift import Shift\nfrom ..variables import Variable, EmployeeDayShiftVariable\nfrom ortools.sat.python.cp_model import CpModel, IntVar\nimport logging\n\n\nclass YourNewObjective(Objective):\n    KEY = \"your-objective-key\"  # Unique identifier for CLI usage\n\n    def __init__(\n        self,\n        weight: float,\n        employees: list[Employee],\n        days: list[Day],\n        shifts: list[Shift],\n    ):\n        \"\"\"\n        Initialize your objective with necessary data.\n\n        Args:\n            weight: Multiplier for this objective's contribution to the total objective\n            employees: List of all employees\n            days: List of dates in the planning period\n            shifts: List of available shifts\n        \"\"\"\n        super().__init__(weight, employees, days, shifts)\n\n    def create(self, model: CpModel, variables: dict[str, IntVar]):\n        \"\"\"\n        Define the objective logic using OR-Tools.\n        This method is called during model creation.\n\n        Returns:\n            IntVar or linear expression: The objective term to be optimized\n        \"\"\"\n        # Your objective implementation here\n        # Must return an expression that will be minimized\n        pass\n</code></pre>"},{"location":"developer-view/how-to-add/how-to-add-objective/#step-2-implement-the-objective-logic","title":"Step 2: Implement the Objective Logic","text":"<p>The <code>create</code> method is where you define your objective using OR-Tools CP-SAT API. The returned expression will be minimized by the solver:</p> <pre><code>def create(self, model: CpModel, variables: dict[str, IntVar]):\n    objective_terms = []\n\n    for employee in self._employees:\n        # Example: Minimize total shifts assigned\n        employee_shifts = []\n        for day in self._days:\n            for shift in self._shifts:\n                variable_key = EmployeeDayShiftVariable.get_key(employee, day, shift)\n                if variable_key in variables:\n                    employee_shifts.append(variables[variable_key])\n\n        # Create an objective term for this employee\n        employee_total = sum(employee_shifts)\n        objective_terms.append(employee_total)\n\n    # Return the weighted objective expression\n    return sum(objective_terms) * self._weight\n</code></pre>"},{"location":"developer-view/how-to-add/how-to-add-objective/#step-3-export-the-objective","title":"Step 3: Export the Objective","text":"<p>Add your objective to the <code>__init__.py</code> files:</p> <pre><code># cp/objectives/__init__.py\nfrom .your_new_objective import YourNewObjective as YourNewObjective\n</code></pre> <pre><code># cp/__init__.py\nfrom .objectives import (\n    ...\n    YourNewObjective as YourNewObjective\n)\n</code></pre>"},{"location":"developer-view/how-to-add/how-to-add-objective/#step-4-register-in-solvepy","title":"Step 4: Register in solve.py","text":"<p>Add your objective to the main solver script:</p> <pre><code># solve.py\nfrom cp import (\n    # ... existing imports ...\n    YourNewObjective,\n)\n\ndef main():\n    cli = CLIParser([\n        # ... existing constraints ...\n        # ... existing objectives ...\n        YourNewObjective,\n    ])\n\n    # ...\n\n    objectives = [\n        # ... existing objectives ...\n        YourNewObjective(1.0, employees=employees, days=days, shifts=shifts),\n    ]\n</code></pre>"},{"location":"developer-view/how-to-add/how-to-add-variable/","title":"How to add a Variable","text":""},{"location":"developer-view/how-to-add/how-to-add-variable/#adding-a-new-variable-to-the-shift-scheduling-system","title":"Adding a New Variable to the Shift Scheduling System","text":"<p>This guide explains how to create and integrate a new variable into the shift scheduling system.</p>"},{"location":"developer-view/how-to-add/how-to-add-variable/#overview","title":"Overview","text":"<p>Variables are the decision elements that the solver can set when creating a schedule. They represent choices like \"Does employee X work shift Y on day Z?\"</p>"},{"location":"developer-view/how-to-add/how-to-add-variable/#why-variable-classes","title":"Why Variable Classes?","text":"<ul> <li>Consistent Referencing: Variables are used in multiple constraints and objectives. Having dedicated classes makes it easier to reference them consistently instead of needing to remember the keys by hard.</li> <li>Export Integration: Variables are part of the export functionality. Having well-defined classes ensures proper serialization and data exchange.</li> </ul>"},{"location":"developer-view/how-to-add/how-to-add-variable/#step-1-create-the-variable-class","title":"Step 1: Create the Variable Class","text":"<p>Create a new Python file in the <code>cp/variables/</code> directory:</p> <pre><code># cp/variables/your_new_variable.py\nfrom .variable import Variable\nfrom employee import Employee\nfrom day import Day\nfrom shift import Shift\nfrom ortools.sat.python.cp_model import CpModel, IntVar\n\n\nclass YourNewVariable(Variable):\n    def __init__(self, employees: list[Employee], days: list[Day], shifts: list[Shift]):\n        super().__init__()\n        self._employees = employees\n        self._days = days\n        self._shifts = shifts\n\n    def create(self, model: CpModel, variables: dict[str, IntVar]) -&gt; list[IntVar]:\n        created_vars = []\n\n        for employee in self._employees:\n            for day in self._days:\n                # Binary variable (True/False)\n                var = model.new_bool_var(\n                    YourNewVariable.get_key(employee, day)\n                )\n                created_vars.append(var)\n\n        return created_vars\n\n    @staticmethod\n    def get_key(employee: Employee, day: Day) -&gt; str:\n        return f\"your_var_e:{employee.get_key()}_d:{day.strftime('%Y-%m-%d')}\"\n</code></pre>"},{"location":"developer-view/how-to-add/how-to-add-variable/#step-2-export-the-variable","title":"Step 2: Export the Variable","text":"<p>Add your variable to the <code>__init__.py</code> files:</p> <pre><code># cp/variables/__init__.py\nfrom .your_new_variable import YourNewVariable as YourNewVariable\n</code></pre> <pre><code># cp/__init__.py\nfrom .variables import (\n    ...\n    YourNewVariable as YourNewVariable\n)\n</code></pre>"},{"location":"developer-view/how-to-add/how-to-add-variable/#step-3-register-in-solvepy","title":"Step 3: Register in solve.py","text":"<p>Add your variable to the main solver script:</p> <pre><code># solve.py\nfrom cp import (\n    # ... existing imports ...\n    YourNewVariable,\n)\n\ndef main():\n    # ... existing code ...\n\n    variables = [\n        # ... existing variables ...\n        YourNewVariable(employees, days, shifts),\n    ]\n</code></pre>"},{"location":"developer-view/how-to-add/how-to-add-variable/#variable-types","title":"Variable Types","text":"<p>Boolean Variables (True/False decisions): <pre><code>var = model.new_bool_var(name)\n</code></pre></p> <p>Integer Variables (Numeric values): <pre><code>var = model.new_int_var(min_value, max_value, name)\n</code></pre></p>"},{"location":"user-view/","title":"User View","text":"<p>This user view provides all necessary information to understand the problem of automatic staff scheduling, to know all conditions that our program tries to meet and to use our program (light version) yourself.</p> <p>Get right into it:</p> <ul> <li>Understand the problem: Problem Defintion</li> <li>Know the Conditions: List of Conditions</li> <li>Run it yourself: Getting Started</li> </ul>"},{"location":"user-view/getting-started-light-version/","title":"Getting Started (Light)","text":""},{"location":"user-view/getting-started-light-version/#super-light-version","title":"Super Light Version","text":"<p>If you are only interest in viewing one example solution, simply download the file <code>ExampleSolutionView.html</code> from Github and open it with your standard browser. Then you can view a found solution, which is based on the data given in <code>cases/3</code>.</p>"},{"location":"user-view/getting-started-light-version/#light-version","title":"Light Version","text":""},{"location":"user-view/getting-started-light-version/#prerequisites","title":"Prerequisites","text":"<p>Before setting up the project, make sure the following tools are installed on your system:</p>"},{"location":"user-view/getting-started-light-version/#1-install-python-310","title":"1. Install Python 3.10+","text":"<p>This project requires Python 3.10 or higher.</p> <p>Open your terminal (Mac) or Command Prompt (Windows). Check whether and which version of python you have installed by running:</p> <pre><code>python3 --version\n</code></pre> <p>If not installed, download it from the official website: https://www.python.org/downloads/ and install it.</p>"},{"location":"user-view/getting-started-light-version/#2-install-uv","title":"2. Install <code>uv</code>","text":"<p>uv is a fast Python package manager used to create and manage isolated environments. You can install it following the instructions in the official documentation:</p> <p>https://docs.astral.sh/uv/getting-started/installation/</p>"},{"location":"user-view/getting-started-light-version/#installation","title":"Installation","text":"<p>Follow these steps to set up the development environment.</p>"},{"location":"user-view/getting-started-light-version/#1-download-our-project","title":"1. Download our Project","text":"<p>In order to use our application you need to download the code from Github. If you are familiar with Github, you can simply clone the project, if not, you can click on the green \"Code\" button and choose to download as zip file, which you need to unpack. Then open a command line tool (terminal or command prompt) to navigate to the project folder.</p>"},{"location":"user-view/getting-started-light-version/#2-install-dependencies","title":"2. Install dependencies","text":"<p>Make sure <code>uv</code> is installed.</p> <pre><code>uv sync\n</code></pre> <p>This will install all required dependencies.</p>"},{"location":"user-view/getting-started-light-version/#usage","title":"Usage","text":""},{"location":"user-view/getting-started-light-version/#1-solving","title":"1. Solving","text":"<p>After installing dependencies, you can start solving staff scheduling problems by running <pre><code>uv run staff-scheduling solve 3 01.11.2024 30.11.2024\n</code></pre> The three corresponds to the <code>case_id</code> meaning in the folder <code>cases/3</code>. If you want to create your own case simply copy the folder 3 and rename it to another integer. Then you can change the number of employees etc., see configuration.</p> <p>The algorithm needs 5 minutes to find a solution.</p>"},{"location":"user-view/getting-started-light-version/#2-viewing","title":"2. Viewing","text":"<p>After the algorithm found a solution you can view it by running <pre><code>uv run staff-scheduling plot 3\n</code></pre> If you have created your own case, you need to change the integer <code>3</code> to your new case. You can then view the solution by opening the link you see in the terminal, probably http://127.0.0.1:5020.</p> <p>Next to the assigned shift, our visualization offers some more insights.</p> <ul> <li>colored small dot: employee is forbidden to work that specific shift (hard)</li> <li>red background: employee is forbidden to work that day (hard), e.g. vacation day</li> <li>colored small diamond: employee wishes to have shift corresponding to the color off</li> <li>brown triangle: employee wished to have the whole day off</li> <li>green background: wish for specific shift off was granted</li> <li>yellow background: wish for complete day off was granted</li> </ul>"},{"location":"user-view/list-of-conditions/","title":"List of Conditions","text":"<p>We differentiate between two types of conditions:</p> <ul> <li> <p>Constraints (Hard) are essential requirements that must be satisfied for a valid schedule. For example, this includes factors like already planned vacation days.</p> </li> <li> <p>Objectives (Soft) represent aspects that can be optimized but do not constitute strict requirements. An example of this would be minimizing the number of consecutive night shifts.</p> </li> </ul>"},{"location":"user-view/list-of-conditions/#constraints","title":"Constraints","text":""},{"location":"user-view/list-of-conditions/#navigation-links","title":"Navigation Links","text":"<ul> <li>Free day after night shift phase</li> <li>Hierarchy of intermediate shifts</li> <li>Max one shift per day</li> <li>Minimum rest time between shifts</li> <li>Minimum number of staff per shift</li> <li>Planned shifts</li> <li>Rounds (Visiten)</li> <li>Target working time per month</li> <li>Vacation days and free shifts</li> </ul>"},{"location":"user-view/list-of-conditions/#all-constraints","title":"All Constraints","text":""},{"location":"user-view/list-of-conditions/#free-day-after-night-shift-phase","title":"Free day after night shift phase <sup>4</sup>","text":"<p>Likelihood of Confusion</p> <p>Different then the constraint Free days after Night Shift Phase</p> <p>According to recommendations for the healthy organization of night and shift work, workers should have at least 24 hours of free time after a night shift. This ensures that workers have sufficient rest after a night shift. Therefore, if an employee works the night shift today and does not work the night shift tomorrow, they must take the day off.</p>"},{"location":"user-view/list-of-conditions/#hierarchy-of-intermediate-shifts","title":"Hierarchy of intermediate Shifts <sup>2</sup>","text":"<p>Intermediate shifts are assigned once the minimum staffing requirement is met and sufficient personnel resources are available. The assignment of these shifts follows a specific pattern: we prioritize one shift per day for each weekday, followed by weekend shifts. After that, we aim to assign two shifts on weekdays, and then again on weekends.</p> <p>In cases where two or more intermediate shifts are scheduled in a single day, the station management will convert them into early and late shifts, as these options tend to be more popular among staff. However, it\u2019s important to note that this conversion process is currently manual and not automated by our application.</p>"},{"location":"user-view/list-of-conditions/#max-one-shift-per-day","title":"Max one shift per day","text":"<p>Each employee is permitted to work only one shift per day. It is important to note that a night shift counts as part of the day on which it begins.</p>"},{"location":"user-view/list-of-conditions/#minimum-rest-time","title":"Minimum Rest Time <sup>3</sup>","text":"<p>According to Occupational Health and Safety Law (Arbeitsschutzgesetz) the minimum rest time for normal employees need to be at least 11 hours. In hospitals there can be exception to this rule. We did not implement a solution that can vary the minimum rest time, but we just do not allow an early shift following a late shift, because then the rest time would only be 9 hours.</p>"},{"location":"user-view/list-of-conditions/#minimum-number-of-staff-per-shift","title":"Minimum number of staff per shift <sup>2</sup>","text":"<p>Each shift has a minimum required number of staff. This is a hard constraint that must be met. The goal is to ensure that the required number of qualified staff members are present for each shift. Therefore, the total number of staff members assigned to a shift must be equal to the required number of staff for that shift. If there are additional ressources, the fourth kind of shift, intermediate shifts, will be assigned. Qualifications are not ordered, which means, that a \"Fachkraft\" (engl. skilled worker) cannot replace an \"Azubi\" (engl. trainee).</p> <p>The required number of staff can be changed in <code>cases/{caseID}/minimal_number_of_staff.json</code>. Currently we use those numbers:</p>"},{"location":"user-view/list-of-conditions/#fachkr\u00e4fte","title":"Fachkr\u00e4fte","text":"Mo Tu We Th Fr Sa Su Early 3 3 4 3 3 2 2 Late 2 2 2 2 2 2 2 Night 2 2 2 2 2 1 1"},{"location":"user-view/list-of-conditions/#hilfskr\u00e4fte","title":"Hilfskr\u00e4fte","text":"Mo Tu We Th Fr Sa Su Early 2 2 2 2 2 2 2 Late 2 2 2 2 2 2 2 Night 0 0 0 0 0 1 1"},{"location":"user-view/list-of-conditions/#azubis","title":"Azubis","text":"Mo Tu We Th Fr Sa Su Early 1 1 1 1 1 1 1 Late 1 1 1 1 1 1 1 Night 0 0 0 0 0 0 0"},{"location":"user-view/list-of-conditions/#planned-shifts","title":"Planned Shifts <sup>2</sup>","text":"<p>Planned shifts are shifts that are already assigned in TimeOffice. All planned shifts are hard constraints, meaning they are automatically assigned and there will be not solution without those. An example would be the special shift (Z60), which can be assigned to an employee each Thursday in TimeOffice and then also be assigned in our application.</p>"},{"location":"user-view/list-of-conditions/#rounds-visiten","title":"Rounds (Visiten) <sup>2</sup>","text":"<p>In the early shift, at least one employee must conduct a round. Employees need to have a proper qualification to conduct a round. Therefore, at least one qualified employee needs to be assigned to an early shift on workdays.</p>"},{"location":"user-view/list-of-conditions/#target-working-time-per-month","title":"Target working time per month <sup>1</sup>","text":"<p>Each employee has an individual monthly work target. This target is considered a hard constraint because it must be met within a certain range. A maximum deviation of one day shift is allowed (\u00b17.67 hours), but this is minimized by the objective function to ensure minimal overtime/undertime. Therefore, the total working time must fall within the range of all possible shift combinations and the target working time range.</p>"},{"location":"user-view/list-of-conditions/#vacation-days-and-free-shifts","title":"Vacation days and free shifts <sup>1</sup>","text":"<p>Vacation days must remain free, and the day before a vacation day no night shift is allowed. This vacation days are automatically read from the database / TimeOffice.</p>"},{"location":"user-view/list-of-conditions/#objectives","title":"Objectives","text":"<p>All the objectives are combined (added) to a total objective function that the minimum will be approximated from. Each objective has a weight by which one could change the importance of a specific objective. Those weights are set in <code>src/cp/solve.py</code> and should be always greater or equal to 1.0:</p> <pre><code>objectives = [\n    FreeDaysNearWeekendObjective(10.0, employees, days),\n    MinimizeConsecutiveNightShiftsObjective(2.0, employees, days, shifts),\n    MinimizeHiddenEmployeesObjective(100.0, employees, days, shifts),\n    MinimizeOvertimeObjective(4.0, employees, days, shifts),\n    NotTooManyConsecutiveDaysObjective(MAX_CONSECUTIVE_DAYS, 1.0, employees, days),\n    RotateShiftsForwardObjective(1.0, employees, days, shifts),\n    EverySecondWeekendFreeObjective(1.0, employees, days, shifts),\n]\n</code></pre>"},{"location":"user-view/list-of-conditions/#navigation-links_1","title":"Navigation Links","text":"<ul> <li>Every Second Weekend Free Objective</li> <li>Free days after night shift phase</li> <li>Free days near weekend</li> <li>Maximize Wishes</li> <li>Minimize hidden employees</li> <li>Minimize number of consecutive night shifts</li> <li>Minimize overtime and undertime</li> <li>Not too many consecutive working days</li> <li>Rotate shifts forwards</li> </ul>"},{"location":"user-view/list-of-conditions/#all-objectives","title":"All Objectives","text":""},{"location":"user-view/list-of-conditions/#every-second-weekend-free-objective","title":"Every second weekend free objective","text":"<p>Rewards if an employee has every second weekend (Sat, Sun) free.</p> <p>Feature Request</p> <p>In the final presentation of our project another implemenation of Free Days Near Weekend was requested. This is our new, complementary objective, but there is room for improvement. More details can be found in this open issue.</p>"},{"location":"user-view/list-of-conditions/#free-days-after-night-shift-phase","title":"Free days after night shift phase <sup>2</sup>","text":"<p>Likelihood of Confusion</p> <p>Different then the constraint Free day after Night Shift Phase</p> <p>There is also a constraint (soft) called Free day after night shift phase, which ensures that there are at least 24h free after a night shift phase. This objective promotes anthoher 24h free after night shift phase (in total 48h, meaning two days).</p>"},{"location":"user-view/list-of-conditions/#free-days-near-weekend","title":"Free days near weekend","text":"<p>A schedule is found that increases the number of free days near weekends (Fri, Sat, Sun, Mon) for employees.</p>"},{"location":"user-view/list-of-conditions/#maximize-wishes","title":"Maximize Wishes <sup>2</sup>","text":"<p>We try to grant as many wishes of the employees as possible. The employee can wish for a free shift or a complete free day. In our visualization wishes are also shown:</p> <ul> <li>colored small diamond: employee wishes to have shift corresponding to the color off</li> <li>brown triangle: employee wished to have the whole day off</li> <li>green background: wish for specific shift off was granted</li> <li>yellow background: wish for complete day off was granted</li> </ul>"},{"location":"user-view/list-of-conditions/#minimize-hidden-employees","title":"Minimize hidden employees","text":"<p>Hidden employees are employees that do not exist. Shifts should only be assigned to them if otherwise a valid solution cannot be found. This for example happens, if there is a shortage on skilled employees. Hidden employees do not have the same rules as real employees, they can work multiple shifts per day. They should indicate how many employees / how many shifts are missing to get a valid schedule.</p>"},{"location":"user-view/list-of-conditions/#minimize-number-of-consecutive-night-shifts","title":"Minimize number of consecutive night shifts <sup>4</sup>","text":"<p>The aim is to minimize the length of night shift phases, defined as consecutive night shifts occurring one after another.</p>"},{"location":"user-view/list-of-conditions/#minimize-overtime-and-undertime","title":"Minimize overtime and undertime","text":"<p>The goal is to minimize both overtime and undertime to ensure a fair and equitable distribution of work among employees. Hard limits are established, as outlined in the section on Target Working Time per Month.</p>"},{"location":"user-view/list-of-conditions/#not-too-many-consecutive-working-days","title":"Not too many consecutive working days <sup>4</sup>","text":"<p>The aim is to minimize consecutive working days that extend to six or more, in order to prevent prolonged periods of work.</p>"},{"location":"user-view/list-of-conditions/#rotate-shifts-forwards","title":"Rotate shifts forwards <sup>4</sup>","text":"<p>The forward shift rotation constraint requires employees to transition from earlier shifts to later shifts, promoting better health and reducing fatigue. An employee's weekly schedule should progress from early shifts to late shifts and then to night shifts, not the other way around.</p> <ol> <li> <p>OR Tools Documentation \u21a9\u21a9</p> </li> <li> <p>Problem definition (as this was a lab course at RWTH)\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>Occupational Health and Safety Law (Arbeitsschutzgesetz) (PDF file from Moodle)\u00a0\u21a9</p> </li> <li> <p>Guidelines for shift work\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"user-view/problem-definition/","title":"Problem Definition","text":"<p>Efficient staff scheduling in hospitals is crucial for the optimal allocation of personnel resources and for ensuring that workflows run smoothly. This, in turn, directly affects the quality of patient care. Currently, duty rosters are often created manually, which is time-consuming and prone to inefficiencies. This complexity arises from the need to consider multiple constraints, such as staffing ratios and labor laws (e.g., working time regulations).</p>"},{"location":"user-view/problem-definition/#goal","title":"Goal","text":"<p>Our objective is to streamline the creation of staff schedules by automating the process. This involves assigning five different types of shifts ('Early', 'Late', 'Night', 'Intermediate' and 'Special') across employees. Our solution aims to meet all specified conditions, ensuring that the resulting schedule is ready for implementation or requires only minor adjustments by trained personnel.</p> <p>This goal was established in collaboration with Pradtke GmbH and St. Marien-Hospital D\u00fcren, who provided the necessary domain expertise.</p>"},{"location":"user-view/problem-definition/#workflow","title":"Workflow","text":"<p>To achieve this goal, we need to complete four key steps:</p> <ol> <li>Provide additional information, such as employee preferences, in a JSON file.</li> <li>Connect to TimeOffice (Schedule Planner) to retrieve employee and scheduling data.</li> <li>Approximate the optimal schedule by assigning shifts to employees.</li> <li>Write the final solution back into TimeOffice.</li> </ol>"},{"location":"user-view/problem-definition/#conditions","title":"Conditions","text":"<p>The requirements that our code must fulfill were defined by our expert partners. These conditions are designed to comply with German labor laws, adhere to shift work recommendations, and reflect the actual workflows in the hospital setting.</p> <p>We differentiate between two types of conditions: constraints (hard) and objectives (soft).</p> <ul> <li> <p>Constraints are essential requirements that the schedule must meet. For example, this includes factors like already planned vacation days.</p> </li> <li> <p>Objectives, on the other hand, represent aspects that can be optimized but do not constitute strict requirements. An example of this would be minimizing the number of consecutive night shifts.</p> </li> </ul> <p>A list of all the conditions can be found here: List of Conditions.</p>"},{"location":"user-view/configuration/","title":"Overview of Configurations","text":"<p>Note</p> <p>Currently, our application lacks a user-friendly interface for comfortably managing configurations. Instead, these settings are stored in JSON files, which requires manual editing to make any changes.</p> <p>Welcome to the configuration overview of our project! This document aims to provide users with a clear understanding of the various settings available within our application.</p> <p>Our application features two modes: the full version, which connects to a centralized database, and the light version, designed for use without database access. In the light version without database access you can adjust all configurations, in contrast to the full version where many configurations are already defined through the database.</p> <p>In this overview, we will differentiate between user-adjustable configurations that can be modified at any time and those specific to the light version.</p> <p>Let\u2019s explore the available configurations!</p>"},{"location":"user-view/configuration/#user-adjustable-configurations","title":"User-Adjustable Configurations","text":"<ul> <li> <p>Forbidden Days and Shifts: Configure specific days or shifts when certain employees are not allowed to work here.</p> </li> <li> <p>Rounds Permission: Set up which employees need to be available for early weekday rounds (german: Visiten) here. Our application ensures at least one of these employees is assigned to an early shift.</p> </li> <li> <p>Minimum Number of Staff: Define the minimal number of staff required per type (\"Hilfskraft\", \"Fachkraft\" or \"Azubi\") for each day of the week and shift here.</p> </li> <li> <p>Qualification Mapping: Assign each qualification label from the database to one of the three types: \"Hilfskraft\", \"Fachkraft\" or \"Azubi\" here.</p> </li> <li> <p>Weights: Adjust the importance of objectives in the general objective function here.</p> </li> <li> <p>Blocked Shifts and Days: Adjust availability of employees manually (!= vacation days) here, e.g. block all night shifts if the person is not allowed to work at night, or block each Thursday if the employee does not work on Thursdays.</p> </li> </ul>"},{"location":"user-view/configuration/#light-version-exclusives","title":"Light-Version Exclusives","text":"<ul> <li> <p>Vacation Days: Manually configure vacation days and free shifts, as they are normally set in TimeOffice and imported automatically here.</p> </li> <li> <p>Employees: Modify employee information that is typically managed in TimeOffice here.</p> </li> <li> <p>Planned Shifts: Preplan fixed shifts, e.g. special shifts (Z60). Normally done in TimeOffice, but in light-version it can be changed here</p> </li> </ul>"},{"location":"user-view/configuration/blocked-shifts/","title":"Blocking Shifts","text":"<p>Note</p> <p>Currently, our application lacks a user-friendly interface for comfortably managing configurations. Instead, these settings are stored in JSON files, which requires manual editing to make any changes.</p>"},{"location":"user-view/configuration/blocked-shifts/#blocked-shifts","title":"Blocked Shifts","text":"<p>Blocked shifts are used to manually restrict specific shifts for individual employees based on their availability. For example, you may want to indicate that an employee is unavailable every Thursday, not allowed to work night shifts, or only permitted to work night shifts. This is a hard constraint.</p> <p>These configurations can be modified in the file named <code>cases/{case_id}/wishes_and_blocked.json</code>. The structure of this file looks as follows:</p> <pre><code>{\n    \"blocked_days\": [\n        1,\n        2\n    ],\n    \"blocked_shifts\": [\n        [\n            25,\n            \"F\"\n        ]\n    ],\n    \"firstname\": \"Janett\",\n    \"key\": 791,\n    \"name\": \"Branz\",\n    \"wish_days\": [],\n    \"wish_shifts\": []\n}\n</code></pre> <p>To add a blocked day, just add the number to the list; to add a blocked shift, add a list with two entries <code>[day, german shift abbreviation]</code> to <code>\"blocked_shifts\"</code>.</p>"},{"location":"user-view/configuration/forbidden-days/","title":"Modify Forbidden Days / Shifts","text":"<p>Note</p> <p>Currently, our application lacks a user-friendly interface for comfortably managing configurations. Instead, these settings are stored in JSON files, which requires manual editing to make any changes.</p>"},{"location":"user-view/configuration/forbidden-days/#forbidden-days","title":"Forbidden Days","text":"<p>Forbidden days are designated by TimeOffice as days when an employee is not permitted to work, except during vacation periods. These days are typically marked with a cross in the TimeOffice system.</p> <p>In the full version of our application, forbidden days and vacation days are read from the database and stored in the file <code>cases/{case_id}/free_shifts_and_vacation_days.json</code>. This file is automatically generated and contains an entry for each employee in the following format:</p> <pre><code>{\n      \"firstname\": \"Burkhild\",\n      \"forbidden_days\": [\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        28,\n        29\n      ],\n      \"key\": 7796,\n      \"name\": \"Hertzler\",\n      \"planned_shifts\": [],\n      \"vacation_days\": []\n}\n</code></pre> <p>Within this JSON structure, you can easily modify the list of forbidden days, which indicates the specific dates on which an employee is not allowed to work. To update these settings, simply locate the relevant entry for each employee and adjust the <code>forbidden_days</code> array as needed.</p>"},{"location":"user-view/configuration/min-staff/","title":"Minmal Number of Staff","text":"<p>Note</p> <p>Currently, our application lacks a user-friendly interface for comfortably managing configurations. Instead, these settings are stored in JSON files, which requires manual editing to make any changes.</p>"},{"location":"user-view/configuration/min-staff/#minimum-number-of-staff","title":"Minimum Number of Staff","text":"<p>To ensure that each shift is adequately staffed with qualified personnel, it is essential to set the minimum required number of staff members. This configuration can be changed in the file <code>cases/{case_id}/minimal_number_of_staff.json</code>.</p> <p>The structure of this JSON file looks as follows:</p> <pre><code>{\n    \"Azubi\": {\n        \"Di\": {\n            \"F\": 1,\n            \"N\": 0,\n            \"S\": 1\n        },\n        ...\n    },\n    ...\n}\n</code></pre> <p>In this example, the keys represent employee types (e.g., Azubi) and days of the week (e.g., Di for Tuesday, abbreveations here are in German). The values indicate the minimum required number of staff for different shifts:</p> <ul> <li>F for early shifts,</li> <li>N for night shifts, and</li> <li>S for late shifts.</li> </ul> <p>To modify the minimum staffing requirements, simply update the numerical values corresponding to each shift type as needed.</p>"},{"location":"user-view/configuration/planned-shifts/","title":"Preplanning Shifts","text":"<p>Note</p> <p>Currently, our application lacks a user-friendly interface for comfortably managing configurations. Instead, these settings are stored in JSON files, which requires manual editing to make any changes.</p>"},{"location":"user-view/configuration/planned-shifts/#planned-shifts","title":"Planned Shifts","text":"<p>Planned shifts refer to shifts that have already been assigned in TimeOffice, including special shifts such as \"Sonderdienst Z60.\" These assignments can be directly managed within the TimeOffice system.</p> <p>In the full version of our application, the file containing planned shifts is automatically generated and stored at <code>cases/{case_id}/free-shifts-and-vacation-days.json</code>. In contrast, users of the light version can modify this file as needed.</p> <p>The structure of this JSON file includes entries for each employee, as shown below:</p> <pre><code>{\n      \"firstname\": \"Janett\",\n      \"forbidden_days\": [],\n      \"key\": 791,\n      \"name\": \"Branz\",\n      \"planned_shifts\": [\n        [\n          5,\n          \"Z60\"\n        ]\n      ],\n      \"vacation_days\": []\n    },\n</code></pre> <p>In this example, the <code>planned_shifts</code> array indicates any shifts that have been assigned to the employee. It is important to note that a shift assigned in the <code>planned_shifts</code> section serves as a hard constraint, meaning that it must be adhered to when scheduling other shifts.</p> <p>By effectively managing planned shifts, organizations can ensure proper staffing levels and compliance with existing commitments.</p>"},{"location":"user-view/configuration/qualifications/","title":"Qualification Mapping","text":"<p>Note</p> <p>Currently, our application lacks a user-friendly interface for comfortably managing configurations. Instead, these settings are stored in JSON files, which requires manual editing to make any changes.</p>"},{"location":"user-view/configuration/qualifications/#mapping-of-qualifications","title":"Mapping of Qualifications","text":"<p>In our application, qualifications are mapped to specific employee types to ensure proper categorization and management of personnel. This mapping is stored in the file located at <code>cases/{course_id}/employee_types.json</code>.</p> <p>The structure of this JSON file is as follows:</p> <pre><code>{\n  \"Azubi\": [\n    \"A-Pflegefachkraft (Krankenpflege) (A-81302-018)\",\n    \"A-Pflegeassistent/in (A-81302-014)\"\n  ],\n  \"Fachkraft\": [\n    \"Pflegefachkraft (Krankenpflege) (81302-018)\",\n    \"Gesundheits- und Krankenpfleger/in (81302-005)\",\n    \"Krankenschwester/-pfleger (81302-008)\",\n    \"Altenpfleger/in (82102-002)\"\n  ],\n  \"Hilfskraft\": [\n    \"Krankenpflegehelfer/in (1 j\u00e4hrige A.) (81301-006)\",\n    \"Pflegeassistent/in (81302-014)\",\n    \"Helfer/in - station\u00e4re Krankenpflege (81301-002)\",\n    \"Stationshilfe (81301-018)\",\n    \"Bundesfreiwilligendienst (BFD)\",\n    \"Medizinische/r Fachangestellte/r (81102-004)\"\n  ]\n}\n</code></pre> <p>In this configuration, each employee type\u2014such as Azubi, Fachkraft, and Hilfskraft\u2014is associated with relevant qualifications.</p>"},{"location":"user-view/configuration/rounds-permissions/","title":"Modify Round Permissions","text":"<p>Note</p> <p>Currently, our application lacks a user-friendly interface for comfortably managing configurations. Instead, these settings are stored in JSON files, which requires manual editing to make any changes.</p>"},{"location":"user-view/configuration/rounds-permissions/#configuration-of-rounds-visiten","title":"Configuration of Rounds (Visiten)","text":"<p>In our application, rounds, or Visiten, are a specific type of qualification that ensures certain employees are available to fulfill this important role during designated shifts. The configuration for rounds is managed within the <code>cases/{case_id}/general_settings.json</code> file, where special qualifications are defined.</p> <p>The relevant section in the JSON file appears as follows:</p> <pre><code>\"qualifications\": {\n    \"2963\": [\n      \"rounds\"\n    ],\n    \"3868\": [\n      \"rounds\"\n    ],\n    \"791\": [\n      \"rounds\"\n    ]\n}\n</code></pre> <p>In this structure, each personal key corresponds to an employee who has been assigned the qualification for rounds. The personal keys can be found in <code>cases/{case_id}/employees.json</code> and are unique to each employee.</p> <p>Currently, rounds are the only type of special qualification available in our system. The application has been designed to automatically ensure that at least one employee with the \"rounds\" qualification is scheduled for every early shift on weekdays.</p>"},{"location":"user-view/configuration/staff/","title":"Assemble Staff","text":"<p>Note</p> <p>Currently, our application lacks a user-friendly interface for comfortably managing configurations. Instead, these settings are stored in JSON files, which requires manual editing to make any changes.</p>"},{"location":"user-view/configuration/staff/#adding-or-deleting-employees","title":"Adding or Deleting Employees","text":"<p>Employee information is stored in the file located at <code>cases/{case_id}/employees.json</code>. Each employee entry follows this structure:</p> <pre><code>{\n    \"firstname\": \"Annelene\",\n    \"key\": 6928,\n    \"name\": \"Izzo\",\n    \"type\": \"Medizinische/r Fachangestellte/r (81102-004)\"\n}\n</code></pre> <p>To add an employee, create a new JSON object with the appropriate fields for each employee you wish to include. Ensure that you assign a unique key for each employee, as this is essential for identification within the system.</p> <p>To delete an employee, locate their entry in the <code>employees.json</code> file and remove the corresponding JSON object. Be cautious when deleting entries.</p>"},{"location":"user-view/configuration/vacation-days/","title":"Modify Vacation Days","text":"<p>Note</p> <p>Currently, our application lacks a user-friendly interface for comfortably managing configurations. Instead, these settings are stored in JSON files, which requires manual editing to make any changes.</p>"},{"location":"user-view/configuration/vacation-days/#vacation-days","title":"Vacation Days","text":"<p>Vacation days are an essential aspect of employee management, allowing organizations to track and manage time off effectively. In our application, vacation days are primarily set in TimeOffice.</p> <p>In the full version of our application, vacation days are documented alongside forbidden days in the file located at <code>cases/{case_id}/free_shifts_and_vacation_days.json</code>. This file is automatically generated and includes entries for each employee with information about their scheduled time off.</p> <p>The JSON structure for an employee's vacation days appears as follows:</p> <pre><code>{\n    \"firstname\": \"Sandra\",\n    \"forbidden_days\": [\n    18,\n    22,\n    23,\n    24,\n    25\n    ],\n    \"key\": 459,\n    \"name\": \"Shoemake\",\n    \"planned_shifts\": [],\n    \"vacation_days\": [\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    12\n    ]\n},\n</code></pre> <p>In this example, the <code>vacation_days</code> array lists the specific dates on which the employee is scheduled to be on leave. Users can easily modify this list by locating the relevant entry for each employee within the JSON file and adjusting the <code>vacation_days</code> array accordingly.</p>"},{"location":"user-view/configuration/weights/","title":"Adapting Weights","text":"<p>Note</p> <p>Currently, our application lacks a user-friendly interface for comfortably managing configurations. Instead, these settings are stored in JSON files, which requires manual editing to make any changes.</p>"},{"location":"user-view/configuration/weights/#weights-configuration","title":"Weights Configuration","text":"<p>Warning</p> <p>Please note that the weights assigned to objectives must be greater than or equal to 1.</p> <p>In our application, users can adjust the importance of various objectives within the general objective function to optimize scheduling and resource allocation. This configuration is managed in the <code>srs/solve.py</code> file.</p> <p>The objectives are defined as follows:</p> <pre><code>objectives = [\n    FreeDaysNearWeekendObjective(10.0, employees, days),\n    MinimizeConsecutiveNightShiftsObjective(2.0, employees, days, shifts),\n    MinimizeHiddenEmployeesObjective(100.0, employees, days, shifts),\n    MinimizeOvertimeObjective(4.0, employees, days, shifts),\n    NotTooManyConsecutiveDaysObjective(MAX_CONSECUTIVE_DAYS, 1.0, employees, days),\n    RotateShiftsForwardObjective(1.0, employees, days, shifts),\n    MaximizeEmployeeWishesObjective(3.0, employees, days, shifts),\n    FreeDaysAfterNightShiftPhaseObjective(3.0, employees, days, shifts),\n]\n</code></pre> <p>Each objective is assigned a weight represented by a numerical value (e.g., <code>10.0</code>, <code>2.0</code>, etc.). By changing these numbers in the codebase, users can effectively prioritize specific objectives according to their operational needs and preferences.</p>"}]}